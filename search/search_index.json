{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Practicalli GitOps","text":"<p>Practicalli Clojure GitOps provides a hands on approach to learn and practice effective CI &amp; CD workflows.</p> <p>Guides for local and remote Git workflows for effective project build, test and deployment.  Specific information is provided for Clojure projects, although most of the content is applicable to any programming language.</p> <p></p> Related Books <p> Practicalli Clojure Web Services provides a practical guide to creating APIs and Web Services with Clojure.</p> <p> Practicalli Clojure Web Services</p> <p>Initial focus around GitHub.com</p> <p>The majority of open source projects are managed via GitHub.com and its workflows, so this is the initial focus of the Practicalli GitOps book.  Other services, e.g. GitLab will also be covered. </p> Clojure CI and CD pipeline infographic GitHub marketplace actions <ul> <li>clojure setup</li> <li>clj-kondo setup</li> </ul>"},{"location":"#resources","title":"Resources","text":"<p> Practicalli Website</p> <p> Practicalli YouTube channel</p>"},{"location":"#navigate-the-book","title":"Navigate the book","text":"<p>Use the mouse or built-in key bindings to navigate the pages of the book</p> <ul> <li>P , , : go to previous page</li> <li>N , . : go to next page</li> </ul> <p>Use the search box to quickly find a specific topic</p> <ul> <li>F , S , / : open search dialog</li> <li>Down , Up : select next / previous result</li> <li>Esc , Tab : close search dialog</li> <li>Enter : follow selected result</li> </ul>"},{"location":"#sponsor-practicalli","title":"Sponsor Practicalli","text":"<p>All sponsorship funds are used to support the continued development of Practicalli series of books and videos, although most work is done at personal cost and time.</p> <p>Thanks to Cognitect, Nubank and a wide range of other sponsors from the Clojure community for your continued support</p>"},{"location":"#creative-commons-license","title":"Creative commons license","text":"This work is licensed under a Creative Commons Attribution 4.0 ShareAlike License (including images &amp; stylesheets)."},{"location":"assets/images/social/","title":"Social Cards","text":"<p>Social Cards are visual previews of the website that are included when sending links via social media platforms.</p> <p>Material for MkDocs is configured to generate beautiful social cards automatically, using the colors, fonts and logos defined in <code>mkdocs.yml</code></p> <p>Generated images are stored in this directory.</p>"},{"location":"git/","title":"Git Client","text":"<p>Git binary is available in most good operating systems or from Git SCM website</p>"},{"location":"git/#quick-start","title":"Quick Start","text":"<p>Configure Git identity</p> <pre><code>git config --global user.name \"your name\"\ngit config --global user.email \"your.name@domain.com\"\n</code></pre> <p>Anonymise email for user</p> <p>GitHub user account Settings &gt; Emails has an option to use a <code>@users.noreply.github.com</code> address rather than the real email address.</p> <p>The noreply address should be set as the <code>user.email</code> configuration.</p> <p>Initialise a local repository (inside your project directlory)</p> <pre><code>git init\n</code></pre> <p>Status of your files and all uncommited changes</p> <pre><code>git status\n</code></pre> <p>Tell Git which changes you want to make part of the next commit (staging)</p> <pre><code>git add filename       ; to add a specific file\ngit add .              ; to add everything\ngit add *.HTML         ; add all html files\n</code></pre> <p>Commit those files to create a new version</p> <pre><code>git commit -m \"meaningful commit message\"\n</code></pre> <p>Push your code to a remote repository (eg. Github)</p> <pre><code>git remote add repo-name git@github.com:github-account/repo-name.git\ngit push repo-name master\n</code></pre>"},{"location":"git/aliases-for-nicer-git-output/","title":"Aliases for nicer Git output","text":"<p>Just like the Unix shell, you can add aliases to Git as short-cuts to the command that you use frequently, so you can use git even more effectively.</p> <p>Defining aliases for those tricky to remember commands you dont use very often, but help you get yourself out of trouble with Git.</p>"},{"location":"git/aliases-for-nicer-git-output/#git-log","title":"Git Log","text":"<p>The default <code>git log</code> command is very verbose in its output, especially when you have many commits.  Using a few options to the git log command you can get a much more useful output.</p>"},{"location":"git/aliases-for-nicer-git-output/#oneline","title":"oneline","text":"<p>As you can probably guess, the <code>--oneline</code> option puts all the information of a commit on one line.  This commit information is the abreviated commit number and the commit message.</p>"},{"location":"git/aliases-for-nicer-git-output/#graph-option","title":"graph option","text":"<p>This displays the log as a graph showing where branching and merging has taken place</p>"},{"location":"git/aliases-for-nicer-git-output/#decorate-option","title":"decorate option","text":"<p>This shows which branches are on which commit versions, including remote repositories that have been added to the local repository.  So you can easily see the most recent commit for repository and branch.  This information help you understand if you need to push or merge commits between repositories and branches.</p>"},{"location":"git/aliases-for-nicer-git-output/#add-the-git-log-alias","title":"Add the Git log alias","text":"<p>Putting these three options together in the alias file: </p> <pre><code>[alias] \n  lg = log --oneline --graph --decorate\n</code></pre>"},{"location":"git/aliases-for-nicer-git-output/#hardcore-customisation","title":"hardcore customisation","text":"<p>You can also define exactly what information you want displayed each line of the Git log (and in what color) using the <code>--pretty</code> option </p> <pre><code>[alias] \n  lp = log \n       --graph \n       --pretty=format:\n         '%C(cyan)%h%Creset - %C(bold yellow)%d%Creset %s %C(blue)(%ar) %C(magenta)%an%Creset' \n       --all\n</code></pre> <p>The above alias should all be on one line in the .gitconfig file</p>"},{"location":"git/aliases-for-nicer-git-output/#other-useful-aliases","title":"Other useful aliases","text":"<p>When you become a regular git user you will notice you type <code>git status</code> very often.  You may also notice it is also quite verbose in its output.  Once you know the different stages of your workflow of changes (untracked, modified, staged) you simply get a summary view of the status by using the <code>-s</code> option</p> <p><code>git status -s</code></p> <p></p> <p>I also like to add branch information to my status output....</p> <pre><code>[alias] \n  sitrep = status -sb\n  sr = status -sb\n  word = diff --word-diff\n  unstage = reset HEAD\n</code></pre> <p>Read the official documentation on git customisation for more options.</p>"},{"location":"git/aliases/","title":"Aliases","text":"<p>Add aliases to Git as short-cuts to the command frequently used or for those tricky to remember commands not used very often, but help you get yourself out of trouble with Git.</p>"},{"location":"git/aliases/#git-log","title":"Git Log","text":"<p>The default <code>git log</code> command is very verbose in its output, especially when you have many commits.  Using a few options to the git log command you can get a much more useful output.</p>"},{"location":"git/aliases/#oneline","title":"oneline","text":"<p>As you can probably guess, the <code>--oneline</code> option puts all the information of a commit on one line.  This commit information is the abreviated commit number and the commit message.</p>"},{"location":"git/aliases/#graph-option","title":"graph option","text":"<p>This displays the log as a graph showing where branching and merging has taken place</p>"},{"location":"git/aliases/#decorate-option","title":"decorate option","text":"<p>This shows which branches are on which commit versions, including remote repositories that have been added to the local repository.  So you can easily see the most recent commit for repository and branch.  This information help you understand if you need to push or merge commits between repositories and branches.</p>"},{"location":"git/aliases/#add-the-git-log-alias","title":"Add the Git log alias","text":"<p>Putting these three options together in the alias file:</p> <pre><code>    [alias]\n      lg = log --oneline --graph --decorate\n</code></pre>"},{"location":"git/aliases/#hardcore-customisation","title":"hardcore customisation","text":"<p>You can also define exactly what information you want displayed each line of the Git log (and in what color) using the <code>--pretty</code> option</p> <pre><code>    [alias]\n      lp = log\n           --graph\n           --pretty=format:\n             '%C(cyan)%h%Creset - %C(bold yellow)%d%Creset %s %C(blue)(%ar) %C(magenta)%an%Creset'\n           --all\n</code></pre> <p>The above alias should all be on one line in the .gitconfig file</p>"},{"location":"git/aliases/#other-useful-aliases","title":"Other useful aliases","text":"<p>When you become a regular git user you will notice you type <code>git status</code> very often.  You may also notice it is also quite verbose in its output.  Once you know the different stages of your workflow of changes (untracked, modified, staged) you simply get a summary view of the status by using the <code>-s</code> option</p> <pre><code>git status -s\n</code></pre> <p>add branch information to the status output</p> <pre><code>    [alias]\n      sitrep = status -sb\n      sr = status -sb\n      word = diff --word-diff\n      unstage = reset HEAD\n</code></pre> <p>Read the official documentation on git customisation for more options.</p>"},{"location":"git/chapter10-collaborating-with-github/","title":"Collaborating with Github","text":"<p>Everyone has their own repository locally</p> <p>Everyone has their own local development environment - using their ide &amp; foreman</p> <p>Developers can spin up another application on heroku as a different environment.  Every time a new heorku app is created, a new git repository is created.  This gives a lot of flexibility when it comes to managing changes, although you need to manage the progression of your changes through each repository.</p> <p>Using git log --decorate you can see the relative progression of your changes as commits to each repositories.</p> <p>When you are working with multiple heroku applications, then using environment variables will allow you to manage resource configuration in each environment.  Hard coding configuration information in your application will not lead to a very secure, stable or scalable application.</p> <p>Back to top...</p> <p>Workshop homepage</p>"},{"location":"git/check-changes/","title":"Check For Changes","text":"<p>Git provides several commands to help you see changes in your project files, helping you manage your project easily and helping you capture small and coheirent changes.</p>"},{"location":"git/check-changes/#git-status","title":"Git Status","text":"<p>Even experienced Git users will run the <code>git status</code> command very frequently.  This command gives you an overview of all the files that contain changes, changes that have been staged and any files Git is not currenly tracking</p> <p>untracked files are those that have not been added to the Git repository</p> <p>If you are using a GUI client for Git, it may be running <code>git status</code> regularly in the background so the information it is displaying is up to date.</p> <p>Git status only shows the changes happening locally, it will not show changes on any remote repository (ie. on Github).  See the section on <code>git log</code> for tracking changes in remote repositories.</p>"},{"location":"git/check-changes/#git-diff","title":"Git Diff","text":"<p>Compare changes between the working copy and the staging area.  You can compare all files in the project or just the changes in a specific file or filename pattern</p> <pre><code>    git diff\n    git diff filename\n    git diff *.md\n</code></pre> <p>Compare changes between the staging area and the latest commit</p> <pre><code>    git diff --cached\n    git diff filename --cached\n    git diff *.md --cached\n</code></pre> <p>Compare changes against a specific commit (version)</p> <pre><code>    git diff v1.09       ; compare working directory against specific version\n    git diff dev master   ; difference between two branches\n</code></pre> <p>Using the <code>--stat</code> option to see just the statistics about the changes - eg, you want to see the number of changes rather than all the change details.</p> <pre><code>    git diff v1.09 --stat\n</code></pre>"},{"location":"git/clone/","title":"Clone A Github repository","text":"<p>You previously created a repository on Github so that you can share your code and versions with others.  However the changes to your source code files happen on your laptop, so we need to first make a copy of the Github repository on your laptop.</p> <p>We take a complete copy of the repository on Github repository with all its history, creating an exact clone of it locally on the laptop.  This is called Cloning and uses the command <code>git clone alias URL [directory]</code>, where <code>alias</code> is the short name for the repository <code>URL</code> and <code>directory</code> is an optional directory in which to create the repository</p>"},{"location":"git/clone/#clone-your-github-repository","title":"Clone your Github repository","text":"<p>Change into a suitable directory on your laptop, eg <code>my-projects</code>.  Then clone the Github repository using the command:</p> <pre><code>git clone github git@github.com:jr0cket/git-basics-example git-basics\n</code></pre> <p>This creates a directory called <code>git-basics</code>.  Inside this directory is another called .git which is your local copy of the repository (so dont delete the .git directory)</p>"},{"location":"git/clone/#create-a-local-git-repository","title":"Create a local Git repository","text":"<p>Now you have a project you want to version, we are going to create a local repository Change into the new folder created for your project.  Then create a new git repository using the git initialise command:</p> <pre><code>git init\n</code></pre> <p>You have just created an empty local git repository.  In effect, you have created the .git folder within your project that will contain all the change history and changes themselves as the project develops.  You dont need to understand what goes on in the .git folder, but you do need to remember that if you delete it then all your change history is deleted.</p> <p></p>"},{"location":"git/clone/#viewing-changes-to-files-working-copy","title":"Viewing changes to files (working copy)","text":"<p>To see what changes you could commit to git, use the git status command: <pre><code>git status\n</code></pre></p> <p>If you have files in your project they will show up as untracked files when you do a git status.  This means that these files have yet to be put under git version control.  You will soon see that git status is used all the time to let you know what the current situation is with your changes.</p>"},{"location":"git/clone/#preparing-to-version-your-changes","title":"Preparing to version your changes","text":"<p>To tell git what changes you want to version, you tell git which files you want to add to make up part of the next commit using the git add command.  You can specify a particular file or you can add all files at once.</p> <p>To add a specific file</p> <pre><code>git add filename.ext\n</code></pre> <p>To add all files that have been altered or added to the working copy since the last commit:</p> <pre><code>git add .\n</code></pre> <p>Adding files to git is not the same as doing a commit.  With git add you are preparing one or more files to be committed.  When you add a file, it is placed in what is called the staging area (or index).  Staging files is a useful way to group changes over multiple files in order to make a meaningful commit.  In Chapter 7 - the local git workflow, we will cover the staging area and other steps in Git.</p> <p>To see what files are staged at any time, you use the git status command.</p>"},{"location":"git/clone/#commit-your-changes-to-the-local-repository","title":"Commit your changes to the local repository","text":"<p>When you have told git about all the changes you want to add, you use the <code>git commit</code> command.</p> <p>For each commit, you should provide a meaningful message that explains what you have commited.  When you run the commit command, your default editor will open for you to type in the commit message.  Alternativley you can specify the message with the <code>-m</code> option</p> <pre><code>git commit -m \"meaningful message describing the commit\"\n</code></pre> <p>For additional changes you continue the cycle of adding files (staging them) and then committing those changes.  This gives you a very detailed history of changes, so you can see how the project has evolved, step back in time and more easily merge changes from different developers.</p> <pre><code>git add filename\n</code></pre> <pre><code>git commit -m \"describe the change\"\n</code></pre>"},{"location":"git/clone/#viewing-the-history-of-changes","title":"Viewing the history of changes","text":"<p>You can see all the changes that have been committed to your local repository using the <code>git log</code> command.</p> <p>By default, <code>git log</code> shows a very verbose commit history.  Using options with the git log command you can make the output easier to read.</p> <pre><code>git log --oneline --graph --decorate\n</code></pre> <ul> <li><code>--oneline</code> shows the commit details on a single line</li> <li><code>--graph</code> shows where branches and merges have been made in the history</li> <li><code>--decorate</code> shows which commit version</li> </ul> <p>[TODO: image of git log]</p>"},{"location":"git/config/","title":"Git Config","text":"<p>Git customisation documetation</p>"},{"location":"git/config/#configure-git","title":"Configure git","text":"<ul> <li>github email private with alias for public address, to prevent spam</li> <li>default branch</li> <li>github token</li> <li>using Magit forge</li> </ul> FreeDesktop XDC <p><code>$XDG_CONFIG_HOME/git/config</code> Git client configuration</p> <p><code>$XDG_CONFIG_HOME/git/ignore</code> patterns to ignore when showing git status</p> Default locations <p><code>.gitconfig</code> git client configuration</p> <p><code>.gitignore-global</code> patterns to ignore when showing git status</p> Practicalli Git Configuration Git Config<pre><code># Practicalli Git Configuration\n# Adjust paths if not saved in `~/.config/git/`\n\n## ------ Identity ------ ##\n\n# Default identity configuration\n[include]\n        path = ~/.config/git/identity-practicalli-john\n\n# Over-ride identify for specific directories\n[includeIf \"gitdir:~/projects/company-name\"]\n        path = ~/.config/git/identity-company-name\n\n## ------ Git Behaviour ------ ##\n\n[core]\n    # Set which editor to use for editing commit messages (when not included with -m)\n    # VISUAL or EDITOR environment variables also set the choice of editor\n    # vi used if not set.  Typical examples are nvim or emacsclient\n    editor = nvim\n\n    # file and directory patterns to ignore across all projects\n    excludesfile = ~/.config/git/ignore\n\n    # Tool to page through long output (e.g. git log). `less` is default\n    # pager = less\n\n    # Ensure Linux &amp; MacOSX line endings in checked out text files\n    autocrlf = input\n\n[commit]\n    # Default commit message - useful if team has a commit message policy\n    template = ~/.config/git/commit-message-template\n\n[init]\n    # scripts and hooks to add when creating a new local Git repository\n    # templateDir = ~/.config/git/repo-template/\n\n    # default branch name when creating a new local repository\n    defaultBranch = main\n\n[merge]\n    # Include common parent when merge conflicts arise\n    conflictstyle = diff3\n\n[fetch]\n    # Remove deleted remote branches from local repository\n    prune = true\n\n[merge]\n    # Include common parent when merge conflicts arise\n    conflictstyle = diff3\n\n[push]\n    # Set local brach to track new remote branch automatically\n    # Requires Git 2.37.0\n    autoSetupRemote = true\n\n## ------ Git commands ------ ##\n\n# command line shot cuts\n[alias]\n    branches = branch -av\n    tags = tag -l\n    lg = log --graph --decorate --relative-date --oneline\n    sitrep = status -sb\n    word = diff --word-diff\n    unstage = reset HEAD\n    empty = \"git commit --allow-empty\"\n\n    # delete locate branches merged into the remote\n    delete-local-merged = \"!git fetch &amp;&amp; git branch --merged | egrep -v 'master' | xargs git branch -d\"\n\n# Clone short-cuts\n[url \"git@github.com:practicalli/\"]\n    # git clone practicalli:repo-name\n    insteadOf = practicalli:\n\n[help]\n    # Automatically change incorrectly typed commands\n    # Set timeout (in 0.1 second steps) before git automatically changes the command\n    # autocorrect = 50\n</code></pre> <p>Git Identity configuration</p> <p>Practicalli uses separate identity files for open source and commercial work. identity-practicalli-john<pre><code>## ------- Identity ------- ##\n# Add identity to all commits (required for GitHub / GitLab)\n[user]\n    name = John Practicalli\n\n    # Use GitHub no-reply email address to keep real address private\n    email = \"250870+practicalli-john@users.noreply.github.com\"\n\n    # For signed commits and signed annotated tags\n    # https://www.git-scm.com/book/en/v2/Git-Tools-Signing-Your-Work#_signing\n    # signingkey = &lt;gpg-key-id&gt;\n\n## Identity for using GitHub API\n[github]\n    user = practicalli-john\n\n    # Use `authinfo.gpg` to store tokens for greater security\n    # oauth-token = ghp_verylongtokenwithlotsofrandomlygeneratedcharacters\n    # host = api.github.com\n\n# [credential]\n#     helper = osxkeychain\n</code></pre></p> Identity for specific Company work<pre><code>## ------- Identity ------- ##\n# Add details for specific company identity\n\n# Add identity to all commits (required for GitHub / GitLab)\n[user]\n    name = John Practicalli\n\n    # Use GitHub no-reply email address to keep real address private\n    email = \"account-name@company-name.com\"\n\n    # For signed commits and signed annotated tags\n    # https://www.git-scm.com/book/en/v2/Git-Tools-Signing-Your-Work#_signing\n    # signingkey = &lt;gpg-key-id&gt;\n\n## Identity for using GitHub API\n[github]\n    user = practicalli-john\n\n    # Use `authinfo.gpg` to store tokens for greater security\n    # oauth-token = ghp_verylongtokenwithlotsofrandomlygeneratedcharacters\n    # host = api.github.com\n\n# [credential]\n#     helper = osxkeychain\n</code></pre>"},{"location":"git/config/#core-configuration","title":"Core configuration","text":"<p>Configure a Git identity by adding user name and email which is added to each commit created by that user</p> <p>either edit the <code>~/.gitconfig</code> file or run the following commands</p> <p>Configure user name</p> Configure Git Identity<pre><code>git config --global user.email=obfuscated-name@github.com\n</code></pre> <p>Use the email address used for the Github / GitLab account, or use and obfuscated email address provided by the GitHub account</p> Configure Git Identity<pre><code>git config --global user.email=obfuscated-name@github.com\n</code></pre> <p>To check what has already been added to Git (some gui clients add information to your gitconfig), you can list all the current configuration entries using the command:</p> <pre><code>git config --list\n</code></pre> <p>Use the same email address you have used for your Github account to make things easier.</p> <p>To check what has already been added to Git (some gui clients add information to your gitconfig), you can list all the current configuration entries using the command:</p> <p>Later in this workshop we will see how to set up aliases for the commands and options you regularly use.  We will also show how to set up specify tools for merging changes and viewing diffs (differences between files and commits).</p>"},{"location":"git/config/#global-ignore-file","title":"Global Ignore file","text":"<p>Add patterns that should be ignnored across all projects, such as editor specific configurations and operating system backup files</p> <p>Example global-git-ignore file</p>"},{"location":"git/config/#ssh-keys","title":"ssh keys","text":"<p>generate an SSH key with</p> <p>Generate SSH key<pre><code>ssh-keygen -t rsa -C email-name@domain.com\n</code></pre> TIP:  Use an actual phrase or a series of random words with spaces TIP: store the passphrase in the keyring of the operating system, and have it unlock the key when you login</p>"},{"location":"git/config/#developer-token","title":"Developer token","text":"<p>for use with other tools such as Emacs Magit</p>"},{"location":"git/create-a-git-repository/","title":"Clone the Github repository","text":"<p>You previously created a repository on Github so that you can share your code and versions with others.  However the changes to your source code files happen on your laptop, so we need to first make a copy of the Github repository on your laptop.  </p> <p>We take a complete copy of the repository on Github repository with all its history, creating an exact clone of it locally on the laptop.  This is called Cloning and uses the command <code>git clone alias URL [directory]</code>, where <code>alias</code> is the short name for the repository <code>URL</code> and <code>directory</code> is an optional directory in which to create the repository</p>"},{"location":"git/create-a-git-repository/#clone-your-github-repository","title":"Clone your Github repository","text":"<p>Change into a suitable directory on your laptop, eg <code>my-projects</code>.  Then clone the Github repository using the command:</p> <pre><code>git clone github git@github.com:jr0cket/git-basics-example git-basics\n</code></pre> <p>This creates a directory called <code>git-basics</code>.  Inside this directory is another called .git which is your local copy of the repository (so dont delete the .git directory)</p>"},{"location":"git/create-a-git-repository/#create-a-local-git-repository","title":"Create a local Git repository","text":"<p>Now you have a project you want to version, we are going to create a local repository  Change into the new folder created for your project.  Then create a new git repository using the git initialise command:</p> <pre><code>cd my-projects   \ngit init\n</code></pre> <p>You have just created an empty local git repository.  In effect, you have created the .git folder within your project that will contain all the change history and changes themselves as the project develops.  You dont need to understand what goes on in the .git folder, but you do need to remember that if you delete it then all your change history is deleted.</p> <p></p>"},{"location":"git/create-a-git-repository/#viewing-changes-to-files-working-copy","title":"Viewing changes to files (working copy)","text":"<p>To see what changes you could commit to git, use the git status command:</p> <pre><code>git status\n</code></pre> <p>If you have files in your project they will show up as untracked files when you do a git status.  This means that these files have yet to be put under git version control.  You will soon see that git status is used all the time to let you know what the current situation is with your changes.</p>"},{"location":"git/create-a-git-repository/#preparing-to-version-your-changes","title":"Preparing to version your changes","text":"<p>To tell git what changes you want to version, you tell git which files you want to add to make up part of the next commit using the git add command.  You can specify a particular file or you can add all files at once.</p> <p>To add a specific file</p> <pre><code>git add filename.ext\n</code></pre> <p>To add all files that have been altered or added to the working copy since the last commit:</p> <pre><code>git add .\n</code></pre> <p>Adding files to git is not the same as doing a commit.  With git add you are preparing one or more files to be committed.  When you add a file, it is placed in what is called the staging area (or index).  Staging files is a useful way to group changes over multiple files in order to make a meaningful commit.  In Chapter 7 - the local git workflow, we will cover the staging area and other steps in Git.</p> <p>To see what files are staged at any time, you use the git status command.</p>"},{"location":"git/create-a-git-repository/#commit-your-changes-to-the-local-repository","title":"Commit your changes to the local repository","text":"<p>When you have told git about all the changes you want to add, you use the <code>git commit</code> command.  </p> <p>For each commit, you should provide a meaningful message that explains what you have commited.  When you run the commit command, your default editor will open for you to type in the commit message.  Alternativley you can specify the message with the <code>-m</code> option</p> <pre><code>git commit -m \"meaningful message describing the commit\"\n</code></pre> <p>For additional changes you continue the cycle of adding files (staging them) and then committing those changes.  This gives you a very detailed history of changes, so you can see how the project has evolved, step back in time and more easily merge changes from different developers.</p> <pre><code># edit files\ngit add filename\ngit commit -m \"describe the change\"\n</code></pre>"},{"location":"git/create-a-git-repository/#viewing-the-history-of-changes","title":"Viewing the history of changes","text":"<p>You can see all the changes that have been committed to your local repository using the <code>git log</code> command.</p> <p>By default, <code>git log</code> shows a very verbose commit history.  Using options with the git log command you can make the output easier to read.</p> <pre><code>git log --oneline --graph --decorate\n</code></pre> <ul> <li><code>--oneline</code> shows the commit details on a single line </li> <li><code>--graph</code> shows where branches and merges have been made in the history</li> <li><code>--decorate</code> shows which commit version </li> </ul> <p>[TODO: image of git log]</p>"},{"location":"git/create-github-account/","title":"Create an account on Github","text":"<p>Git hub adds extra collaboration features over git, providing a social coding service which is an excellent resource for working on projects as a team and running open source projects.  Anyone can get a copy of code (clone) in your public repositories, whether or not they have an account on Github.  You don't need any access permissions to do so.</p> <p>If you want to work on a project where you are not a collaborator, you can fork a repository and either develop using that new repository yourself or create pull requests that are sent to the collaborators of the original project.</p> <ul> <li> <p>Forking a repository - creates a new github repositiory for you from a github repository owned by another person or organisation. You have full commit access to this new repository, because its owned by you.</p> </li> <li> <p>Creating a pull request - sends a message to the committers on the original project (the one you forked), inviting them to pull your changes into their project.</p> </li> </ul> <p>To create a free account on Github, go to www.github.com and follow the instructions.</p>"},{"location":"git/create-github-account/#make-committing-code-easier-by-upload-your-public-key","title":"Make committing code easier by upload your public key","text":"<p>Any time you send code to github it is done over a secure connection and therefore you have to identify yourself.  This means you either have to enter your username / password frequently or add those details to your IDE (eg. Eclipse, Intellij, Netbeans, etc.), which may save them as plan text.</p> <p>Rather than use your username and password, pubic key encryption can be used to identify yourself to github (and other services like heroku).  Once you have added the public key to github, every time you connect to github then that key is used to automatically identify you.</p> <p>You can create and add your public key using the excellent instructions on the gthub website</p> <p>If you have already set up Heroku Toolbelt and used the command heroku login then you may already have a public key.  The key that heroku created can also be used for github, assuming you have used the same email address for both accounts.</p>"},{"location":"git/create-your-project/","title":"Creating a Git version controlled project","text":"<p>Create a new folder / project by either creating the project structure yourself or using a build tool to create it for you.  Here are some of the example build tools you could use:</p> <pre><code>## Node project\nnpm init\n\n## Node project via Grunt-init\ngrunt-init my-template\n\n## Project via Yoman generator \nyo generator\n\n## Java project with Maven \nmvn new my-project\n\n## Clojure project with Leiningen \nlein new my-project\n\n## Scala project using Play framework\nplay new my-project\n</code></pre> <p>Now you can see all the files you have created as untracked files in git using</p> <pre><code>git status\n</code></pre> <p>Show example screenshots of git status output for the above projects</p>"},{"location":"git/creating-a-branch/","title":"Branch &amp; merge","text":"<p>Unless branches represent a completely isolated component in your project, then branches should be short lived.  This makes them easier to work with, easier to merge and easier to get rid of when you dont need them.</p> <p>Rebasing (I dont like doing this on shared repos, your loosing tracability because you are rewriting history).  There may be some merit when a team is working very closely on the same part of the code, where there is a lot of communicaton going on.</p> <p>Can use ... from labs to automatically deploy onto heroku from Github - probably dont want to do this for production - or at least make sure than anyone who triggers an automatic deploy knows that they are doing so.</p> <p>Back to top...</p> <p>Workshop homepage</p>"},{"location":"git/git-clients/","title":"Choose your git client","text":"<p>For the workshop the command line will be used so you can focus on understanding the commands that are used.</p> <p>You can follow along with either a command line or graphical git tool.  Please note that installing a graphical tool for git should also provide git on the command line, so no need to install both!</p>"},{"location":"git/git-clients/#command-line-tools","title":"Command Line tools","text":"<p>You can simply install the git command line tools from www.git-scm.com.</p> <p>If you have Ubuntu, then you can use the Ubuntu software center or install git on the command line</p> <pre><code>apt-get install git\n</code></pre>"},{"location":"git/git-clients/#gui-tools","title":"GUI tools","text":"<p>The simplest graphical tools to install are from Github.  If you browse any repository on www.github.com you will notice a \"Clone in Mac\" or \"Clone in Windows\" button at the top left of the page.  If you have not Git tool installed, then you are redirected to a page offering to install the Github graphical git client for you.</p> <p>Github client for MacOSX Github client for Microsoft Windows</p> <p>There are many other Git GUI tools listed on git-scm.com for Linux, MacOSX and Windows.  A very comprehensive Git GUI is SourceTree for MacOSX &amp; Windows</p>"},{"location":"git/git-overview/","title":"Overview of Git and Github","text":"<p>Git is a very powerful tool for managing the changes you make as you develop source code for your software projects.  Typically those changes tracked are the ones made to source code and configuration files.  Git understands how to merge text files together, allowing you to pull in changes from others.  It also helps you compare changes in different versions of text files using the diff tool.</p> <p>You can also manage binary files such as images and propriatory document formats, although git does not typically come with tools that help you merge or compare differences.</p> <p>Before the creation of Git (and Mercurial, Bazar and a few others), most versioning tools for source code used what is called a central model.  Tools like CVS and SVN manage code changes in a single central server, shared across teams and the whole company.  When developers work on code they only get a copy of current code locally on their development machine.  To actually do any commits, to version the code, then they have to connect with the server.  When looking at history and any other activitiy, developers have to communicate with the central server.  If this server is off line or slow, then this can lead to problems working effectively together as a team.</p> <p>Git uses a distributed approach to managing changes (as does bazar &amp; mercurial).  This approach may seema little more complicated at first, but adds far more control and visiblity to your projects.</p> <p>A distributed model means that everyone involved gets a complete copy of the project repository.  It is still common to have a shared repository that holds all the code (e.g. on Github), although this can easily be changed and may evolve over time.</p> <p>Using Git, developers create a copy of a project repository on their development machine, this is called cloning.  This creates a local copy of the repository along with all the files managed by git in your project.  As you have a local repository, all the code changes that  have ever been made are right there giving you a full history of the project.</p> <p>One of the benefits of git therefore is to be able to constantly commit changes, regardless of if you are connected to a shared repository.  You commit all your changes locally first (even if you are connected) and then when ready you can push your changes to a shared repository.</p> <p>It is common to have a common shared repository that is seen as the canonical version of the code for a project.  The core members of the project team, refered to as committers have direct access to update this shared repository.  Anyone with access to the project repository can take a copy (clone).</p> <p>Should you wish to work on the project you can create your own copy, called a fork.  Your fork is your own exact copy of the oringinal repository, including all the history.  As this is your repository, you can commit changes directly.</p> <p>Should you wish to submit your chages back to the original project, you can create a pull request from your fork.  A pull request is a message and one or more commits that are sent to the original project team, inviting them to pull in the changes from your forked repository.</p>"},{"location":"git/github-overview/","title":"Overview of Git and Github","text":"<p>Git is a very powerful tool for managing the changes you make as you develop source code for your software projects.  Typically those changes tracked are the ones made to source code and configuration files.  Git understands how to merge text files together, allowing you to pull in changes from others.  It also helps you compare changes in different versions of text files using the diff tool.</p> <p>You can also manage binary files such as images and propriatory document formats, although git does not typically come with tools that help you merge or compare differences.</p> <p>Before the creation of Git (and Mercurial, Bazar and a few others), most versioning tools for source code used what is called a central model.  Tools like CVS and SVN manage code changes in a single central server, shared across teams and the whole company.  When developers work on code they only get a copy of current code locally on their development machine.  To actually do any commits, to version the code, then they have to connect with the server.  When looking at history and any other activitiy, developers have to communicate with the central server.  If this server is off line or slow, then this can lead to problems working effectively together as a team.</p> <p>Git uses a distributed approach to managing changes (as does bazar &amp; mercurial).  This approach may seema little more complicated at first, but adds far more control and visiblity to your projects.</p> <p>A distributed model means that everyone involved gets a complete copy of the project repository.  It is still common to have a shared repository that holds all the code (e.g. on Github), although this can easily be changed and may evolve over time.</p> <p>Using Git, developers create a copy of a project repository on their development machine, this is called cloning.  This creates a local copy of the repository along with all the files managed by git in your project.  As you have a local repository, all the code changes that  have ever been made are right there giving you a full history of the project.</p> <p>One of the benefits of git therefore is to be able to constantly commit changes, regardless of if you are connected to a shared repository.  You commit all your changes locally first (even if you are connected) and then when ready you can push your changes to a shared repository.</p> <p>It is common to have a common shared repository that is seen as the canonical version of the code for a project.  The core members of the project team, refered to as committers have direct access to update this shared repository.  Anyone with access to the project repository can take a copy (clone).</p> <p>Should you wish to work on the project you can create your own copy, called a fork.  Your fork is your own exact copy of the oringinal repository, including all the history.  As this is your repository, you can commit changes directly.</p> <p>Should you wish to submit your chages back to the original project, you can create a pull request from your fork.  A pull request is a message and one or more commits that are sent to the original project team, inviting them to pull in the changes from your forked repository.</p>"},{"location":"git/ignoring-files/","title":"Ignoring files","text":""},{"location":"git/ignoring-files/#ignoring-files","title":"Ignoring files","text":"<p>There are often files inside your project that you do not want to put into git, these typically includes</p> <ul> <li>Backup files</li> <li>Developer tool configurations</li> <li>Compiled source code</li> <li>Graphics, sound and video files</li> <li>Binary document formats</li> </ul> <p>Telling Git to exclude these types of files will prevent them appearing in your git status report as untracked files and help you focus on managing those files that should be versioned.</p> <p>You can add your project exclusions using filennames, folders and filename patterns.  All these exclusions go into a project file called</p> <pre><code>my-project-folder/.gitignore\n</code></pre> <p>To keep your project .gitignore file simple and focused on the project, any files and patterns you want to ignore that are created by your own development environment (IDE, build tools, etc.) should be placed in a global ignore file, typically:</p> <pre><code>~/.gitignore_global\n</code></pre> <p>Github has a large collection of .gitignore files for different programming languages and tools.</p> <p>Back to top...</p> <p>Workshop homepage</p>"},{"location":"git/local-git-workflow/","title":"The local git workflow","text":"<p>To recap, we have our working copy of our files on our laptop.  When we add those files using git, a copy is placed in what git calls Staging.  This allows you to assemble several files for the commit.</p> <p>As we have a local repository right there on our laptop, we can commit all the files added to the staging area.  If you can add a series of small commits and do this often, it gives you a more detaled version history and gives you more points to jump back in time.  Regular commits helps to reduce merge conflicts when working in teams and using smaller commits gives other developers lots of details about how the project has evolved.</p> <p>In this visual representation you can see the different git stages in which commits can reside.</p> <p></p>"},{"location":"git/local-git-workflow/#understanding-git-add-and-the-staging-area","title":"Understanding git add and the staging area","text":"<p>When you add a file, you are telling git that you want it to be part of the change you are going to commit.</p> <p>Lets say you create a new file with 10 lines of content and then use git add filenname.ext to add it to git.  Then you continue to add another 5 lines the contents of that file.  If you do a commit without adding that file to git again, only the first 10 lines of content will be in that commit.</p> <p>If you do a second git add filenname.ext before you commit, then all 15 lines of content will be included in the commit.</p> <p>Having to add changes in this way helps you control exactly what makes up your commit without restricting the files you are working on.  Please note that it is advisable to either git add &amp; git commit often so that your changes form part of a meaningful history.</p>"},{"location":"git/local-git-workflow/#what-has-been-added-what-has-changed-using-diff","title":"What has been added - What has changed (using diff)","text":"<p>Once you have added files to the staging area with git add, you can compare any changes made to files in your workspace.  Using git diff you can see all changes or specifying a file will show only the differences in that one file.</p> <pre><code>git diff\ngit diff filename\n</code></pre> <p>You can also compare the files you have added to the staging area to those you have committed using the diff option --staging</p> <pre><code>git diff --staging\ngit diff --staging filename\n</code></pre>"},{"location":"git/local-git-workflow/#removing-files-from-staging-index","title":"Removing files from staging / index","text":"<p>You can remove a file you have put in staging (git add filename) using the git command reset</p> <pre><code>git reset --soft HEAD^\n</code></pre> <p>rolling back to the previous commit on the local repo     git reset HEAD~1</p>"},{"location":"git/local-git-workflow/#to-remove-a-file-from-the-indexstaging","title":"To remove a file from the index/staging","text":"<pre><code>git rm --cached filename.txt\n</code></pre>"},{"location":"git/local-git-workflow/#commit-your-changes","title":"Commit your changes","text":"<p>Once you have staged files using the <code>git add</code> command, you can at any point make those files a commit (think a new version).  The commit will contain all the files you added.</p> <pre><code>git commit -m \"useful message describing the details of your commit\"\n</code></pre> <p>The better commit messages you write the easier it is for others (and yourself) to understand what is going on in your project.</p>"},{"location":"git/local-git-workflow/#working-with-commits-git-log-git-show","title":"Working with commits - git log, git show","text":"<p>Once you have done a commit and there are no more changes in your working directory or staging area, then git status no longer tells you anything.  This is where git log comes in.</p>"},{"location":"git/local-git-workflow/#git-log","title":"git log","text":"<p>Git log shows you the history of the commits you have already made.</p> <pre><code>git log\n</code></pre> <p>By default, git log has a very basic output and shows you the commit number, author, date and commit message.  You can add options to the git log command to get a much nicer and more useful output, even showing which commits have been pushed to one or more remote repositories. </p> <pre><code>git log --graph --oneline --decorate --date-relative\n</code></pre> <p>You can add this to your git configuration as an alias so you dont have to type it all the time</p> <pre><code>git config --global alias.lg 'log --graph --oneline --decorate --date-relative'\n</code></pre>"},{"location":"git/local-git-workflow/#blogs-on-this-subject","title":"Blogs on this subject","text":"<ul> <li>Git basic tips and tricks</li> <li>Must have alias examples</li> </ul>"},{"location":"git/local-git-workflow/#git-show","title":"git show","text":"<p>Git show displays the contents of a commit (description, files, tags, blobs, etc).  By default it shows the log message and textual diff of the text that was modified in the commit. </p> <p>For tags, it shows the tag message and the referenced objects.</p> <p>The command takes options applicable to the git diff-tree command to control how the changes the commit introduces are shown.</p> <p>[TODO] what are the options for git show </p> <pre><code>git show\ngit show HEAD\ngit show 1234567\ngit show tag-name\n</code></pre> <p>Using git show without specifying a commit number or tag will show you the latest commit from the branch you are currently in.  This is usually the same information in git show HEAD as HEAD is a special tag that always points to the latest commit.</p> <p>Back to top... | Next: Chapter 08: Conflict Resolution | Workshop homepage</p>"},{"location":"git/merging-changes/","title":"Merging changes","text":""},{"location":"git/merging-changes/#conflict-resolution-managing-the-merge-process","title":"Conflict resolution - managing the merge process","text":"<p>During the development of your project you will make many changes to your files.  If you follow the \"commit early, commit often\" idea, then most of your commits should be straight forward.</p> <p>Git is very good at merging changes together, although it has its limitations.</p> <p>The longer you leave a change to be commited or the bigger the change is you are making (especially to existing files), the more likely you will have to manage the merge process yourself.  </p>"},{"location":"git/merging-changes/#a-common-merge-conflict-with-github","title":"A common merge conflict with Github","text":"<p>When you create a new repository on Github you are given the choice of creating a Readme.md file and a .gitignore file for one of numerous languages.  These are both really useful things to have.</p> <p>However, if you already have a repository locally with a number of commits, when you create a github repository with these files then you are actually making a commit on the github repository as well.</p> <p>This leaves you with commits locally that you dont have on your github repository and a commit on your Github repository that you dont have locally.  As the commit is newer on the Github repository, then git will not push your local changes as it will not create a \"fast-forward\" commit.  A fast-forward commit is newer than any existing commits in that repository.</p> <p>To resolve this conflict, you have to pull the change you made in the Github (addint a Readme.md and/or .gitignore file) to your local repository.  This is done with the ommand:</p> <pre><code>git pull &lt;repository&gt; &lt;branch&gt;\ngit pull github master\n</code></pre> <p>As your changes are out of sync between the local and Github repository, then you will have to manually merge those changes.</p> <p>Assuming you did not create a Readme.md or .gitignore file locally, then when you pull you should be able just git add the additional files and commit them with git commit.  Then you can finally push all these changes up to the Github repository.</p> <p>If you already had either the Readme.md file or .gitignore file locally, when you do a git pull the text from both versions of the file will be combined, with &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; markers denoting which text comes from which version .</p> <p>There is also a nice page on Github help on dealing with non fast-forward errors.  </p>"},{"location":"git/merging-changes/#working-with-pull-requests","title":"Working with pull requests","text":"<p>If you have a pull request that cant be automatically merged.  A committer on the project can offer suggestions on how the submitter can fix the pull request so it can be merged.  This typically includes:</p> <ul> <li>ensuring the submitter of the pull request has pulled all the changes down from the latest version of the original project.</li> <li>merging any changes between their code and the original project</li> </ul> <p>Once any merge conflicts are resolved, the submitter of the pull request can do another commit locally and to their forked repository on github and that will update the pull request automatically.</p> <p>Back to top...</p> <p>Workshop homepage</p>"},{"location":"git/readme/","title":"A beginners guide to Git and Github","text":"<p>This is a step by step guide to getting going with Git, the distributed version control system.</p> <p>The workshop is deployed on Heroku at: http://git-and-github-workshop.herokuapp.com/.</p> <p>This guide covers the essential features so you can start to use Git to manage your changes in a local repository and then moves on to Github so you can share your managed code with the outside world.</p> <ul> <li>git command line / graphical tool set up on your laptop</li> <li>understanding staging, committing and pushing changes</li> <li>working with git status and git log to manage changes</li> <li>experience using github for new repos as well as forking &amp; cloning</li> <li>managing multiple repositories easily with git log</li> <li>working with pull request</li> </ul> <p>This workshop is focused on using git as a developer and will not be diving under the covers of git, or covering any implementation details.</p>"},{"location":"git/readme/#creating-a-markdown-driven-website-on-heroku","title":"Creating a markdown driven website on Heroku","text":"<p>To create and deploy a static web site from Markdown files on Heroku, using the following instructions:</p> <ol> <li> <p>Create a folder for your project and start writing your content.  You should use an <code>index.md</code> file as you website home page:</p> </li> <li> <p>Inside your project folder, create a git repo containing the file:</p> <pre><code>cd my-project-folder\ngit init\ngit add index.md\ngit commit -m \"Initial project setup\"\n</code></pre> </li> <li> <p>Once the project is under git control, lets create an Heroku application on which to deploy it.  As we are doing something a little different from the usual, we need to specify a specific build pack to tell Heroku how to build, deploy and run our website:</p> <pre><code>heroku create --buildpack https://github.com/jamesward/heroku-buildpack-markdown.git\n</code></pre> </li> </ol> <p>You can optionally specify a name for your website whilst creating it, although this name must be unique within the herokuapps.com domain:</p> <pre><code>    heroku create --buildpack https://github.com/jamesward/heroku-buildpack-markdown.git my-project-name\n</code></pre> <ol> <li> <p>Now your Heroku app is created, an extra remote repository is added to your local git project.  So now you can push the changes in your local repo to Heroku, deploying the website:</p> <pre><code>git push heroku master\n</code></pre> </li> <li> <p>Once deployed you can open your web site with the following heroku command (or just copy the address given at the end of the Heroku deploy message):</p> <pre><code>heroku open\n</code></pre> </li> <li> <p>Continue to develop your content and committing changes to your local repository.  When you want to publish your changes to heroku, simply do another push:</p> <pre><code>git add .\ngit commit -m \"useful commit message\"\ngit push heroku master\n</code></pre> </li> </ol> <p>Also consider creating a repository on Github should you wish to collaborate on the content with others, especially if you have more content contributors than those you wish to be able to deploy to heroku.</p>"},{"location":"git/tutorial/","title":"Git tutorial","text":"<p>This tutorial will give you a practical guide to using the Git version control tool to managing changes to source code and configuration files in projects.  The tutorial also covers collaborating on projects using Github public repositories.  You can either read an overview of Git</p>"},{"location":"git/tutorial/#setting-up-git-github","title":"Setting up Git &amp; Github","text":"<ul> <li>Choose your git client</li> <li>Identify yourself to Git</li> <li>Create an account on Github</li> </ul>"},{"location":"git/tutorial/#creating-git-projects","title":"Creating Git Projects","text":"<ul> <li>Creating a Git managed project</li> <li>Ignoring files</li> </ul>"},{"location":"git/tutorial/#local-git-workflow","title":"Local Git Workflow","text":"<ul> <li>Checking the status - what has changed -- git status, git diff</li> <li>Staging changes  - basic add, git add -p, unstaging untracked files, unstaging tracked files, git diff --cached</li> <li>Committing a new version</li> <li>Git log</li> <li>Chapter 7: The local git workflow</li> </ul>"},{"location":"git/tutorial/#branching-merging-why-do-this","title":"Branching &amp; Merging  - why do this","text":"<ul> <li>try out code and modifications to design, different algorithms</li> <li> <p>easily discard changes that are not needed - or leave them in a branch so they are not affecting / poluting the main codebase</p> </li> <li> <p>Branching and Merging</p> </li> <li>merging changes</li> </ul>"},{"location":"git/tutorial/#collaborating-with-other-developers-using-git-and-github","title":"Collaborating with other developers using Git and Github","text":"<ul> <li>Chapter 10: Collaborating with Github</li> <li>Practices to avoid when using shared repos like Github</li> <li>rebasing, forgetting to push changes (especially for sub modules)</li> </ul>"},{"location":"git/tutorial/#troubleshooting","title":"Troubleshooting]","text":"<ul> <li>what to do if you loose your head</li> <li>if you really have to change a commit</li> <li>unstage changes</li> </ul>"},{"location":"git/tutorial/#resources","title":"Resources","text":"<ul> <li>Git submodules</li> </ul>"},{"location":"git/tutorial/#git-local-workflow-visualised","title":"Git local workflow visualised","text":"<p>You can quickly get versioning your code with Git, all on your own computer.  You do not need to set up a server.</p> <p></p>"},{"location":"git/tutorial/#git-and-github-workflow-visualised","title":"Git and Github workflow visualised","text":"<p>To give you a big picture view of how you use Git and Github, here is a visualisation of the workflow for both.  The details of this workflow are ocvered in the workshop from Chapter 10: Collaborating with Github onwards.</p> <p></p>"},{"location":"git/tutorial/#reference","title":"Reference","text":"<ul> <li>Git essential commands for the most common commands for using Git</li> <li>Git Visual cheat sheet</li> <li>Git Reference</li> <li>Learning Version Control wth Git - git-tower.com</li> <li>StarLogs.net demo from my blog</li> </ul>"},{"location":"git/wip/","title":"Working with Staging","text":""},{"location":"git/wip/#removing-changes-from-staging","title":"Removing changes from Staging","text":"<p>Sometimes you add things to staging that you change your minde about.  </p> <p>If a file is untracked by git (its never been part of a commit) then you can remove it from staging using the command</p> <p>git rm --cached filename</p> <p>If the file has been tracked by git, then the above command will cause the file to be removed from the repository should a further commit take place.</p> <p>Therefore, for tracked file that you want to unstage, you should use the command</p> <p>git reset HEAD filename</p>"},{"location":"git/wip/#creating-branches","title":"creating branches","text":""},{"location":"git/wip/#commiting","title":"commiting","text":""},{"location":"git/wip/#merging","title":"merging","text":""},{"location":"git/wip/#remote-branches","title":"remote branches","text":""},{"location":"git/wip/#deleting-remote-branches","title":"deleting remote branches","text":""},{"location":"git/wip/#deleting-local-branches","title":"deleting local branches","text":""},{"location":"git/wip/#git-remote-purge","title":"git remote purge","text":""},{"location":"git/wip/#working-with-tags","title":"Working with Tags","text":""},{"location":"git/wip/#creating-tags","title":"creating Tags","text":""},{"location":"git/wip/#git-push-tags","title":"git push --tags","text":""},{"location":"git/wip/#commits","title":"Commits","text":""},{"location":"git/wip/#discarding-a-local-commits","title":"discarding a local Commits","text":""},{"location":"git/wip/#discarding-a-remote-commit-and-resetting-your-local-working-copy","title":"discarding a remote commit and resetting your local working copy","text":"<p>git reset --hard HEAD^ git checkout master</p>"},{"location":"git/wip/#git-log-updating-details-about-remotes","title":"Git Log - Updating details about Remotes","text":"<p>(see git-live script)</p> <p>Use git fetch --all or git remote update to get details of all the changes from every remote repository attached to the local git repository you call the command from.</p>"},{"location":"git/wip/#testing-branches","title":"Testing branches","text":"<p>Say you want to test out your branch you have been working on but your setup is only configured to work on master, then you can push a branch from one repository to the master (or any other branch) of another repository.</p> <p>For example, heroku only deploys from master.  You can use git to deploy your developing branch to your heroku-test application using the following notation:</p> <pre><code>git push repository local-branch:remote-branch\n\ngit push heroku-test developing:master\n</code></pre> <p>In this example we are pushing the local developing branch to the master branch of the heroku-test remote repository.  This allows you to use heroku-test application to run some web application tests (eg. selinum).  </p> <p>You dont need to merge your developing branch until after you are happy with oyour testing.</p>"},{"location":"git/wip/#rebase-or-not-rebase-that-is-the-question","title":"Rebase or not rebase, that is the question","text":""},{"location":"git/wip/#what-is-rebasing","title":"what is Rebasing","text":"<p>Rebasing is a way to do merging without including specific commits that would otherwise appear due to a merge.</p> <p>Some teams decide that having extra commits just for merges polutes the history of the project and makes it harder to understand.</p>"},{"location":"git/wip/#why-would-you-do-it","title":"Why would you do it","text":"<p>If you are just starting with Git, then you probably dont want to do this yet.  Make sure you are comfortable with branching and merging before starting to rebase.</p> <p>Rebasing can work well with short lived branches where merges would otherwise happen very often, leading to a high ratio of merge commits.  For these shor lived branches, using rebase helps keep a clean history.</p> <p>If you want to keep a branch up to date from master and dont want to include lots of commits only there because of a merge, then rebase will tidily keep your branch up to date.  This makes sence if the branch is going to be around for a little while or there is active development on the master that you need to keep up with.</p> <p>For branches that have been around for days or weeks, its more likey that you will benefit from a merge.  With a merge you get the full history detail, so its easier to see where things come from if there is a problem merging.</p> <p>Use rebase with care as you are re-writing history and loosing some information about where changes have come from.  Make sure you dont need to know the information you are ommitting with rebase.  </p>"},{"location":"git/wip/#interactive-rebasing","title":"Interactive Rebasing","text":""},{"location":"git/wip/#merging-two-commits-together","title":"merging two commits together","text":"<p>If you have done two commits that should really be one, then you can use rebase interactive to join those commits (squash them in git terms).</p> <p>''''''</p>"},{"location":"git/wip/#intractively-rebase-the-last-three-commits","title":"intractively rebase the last three commits","text":"<p>git rebase -i HEAD~2 ''''</p>"},{"location":"git/wip/#an-editor-opens-up-and-lets-you-edit-the-commits-in-this-case-the-last-commit-will-be-merged-into-the-one-before-it","title":"an editor opens up and lets you edit the commits, in this case, the last commit will be merged into the one before it.","text":"<p>pick 4b65a5a Add tests pick f239187 Implement poodles squash c3f863f Add title to poodle page</p>"},{"location":"git/wip/#git-attributes-file","title":"Git attributes file","text":"<p>Tell git how to manage particular file types</p> <p>For example:</p> <ul> <li>text=auto  .rb text .js text  .bat text eol=crlf  .sh text eol=lf</li> </ul> <p>*.png binary</p>"},{"location":"git/wip/#submodules","title":"Submodules","text":""},{"location":"git/wip/#avoid-double-pushing","title":"Avoid double pushing","text":"<p>As we have seen, when you make changes to a submodule, as well as pushing the changes in that submodule you also need to push the parent repository.  The parent has a reference to a SHA of what it knows as the latest commit for the submodule.  If the parent is pushed without the submodule, then the new commit refered to by the parent is not present in everyone elses repository.</p> <p>Manage this automatically using the --recurse-submodules option on-demand</p> <pre><code>git push --recurse-submodules=on-demand\n</code></pre> <p>Create an alias for this option so that you dont have to type it all (or remember it all if you pick a meaningful alias)</p> <pre><code>git config alias.pushall 'push --recurse-submodules=on-demand'\n</code></pre> <p>additional topics</p> <pre><code>Repositories\nCommits\nViewing changes\nAlias\nGoing forward to fix mistakes\nTags\nRemotes\nGithub\nBranching &amp; merging - when to do it\nStashing\nRebasing is evil !!!\nCherry picking\nPatches\nBisect\nRerere\nBlame\nCommon workflows\nContinuous Integration with Travis\n</code></pre>"},{"location":"git/tips/","title":"Git Tips","text":"<p>We will explore some of the more intermediate and advanced uses of Git in this workshop, to help you get the most of of Git.</p> <p>Each section is self contained, unless otherwise mentioned, so you can read these tips in any order.  In general though, the most common tips are in the first few sections.</p>"},{"location":"git/tips/branching-stragegies/","title":"Branching Stragegies","text":"<p>Previously we discussed what a branch is in Git, how they are created and how to switch between branches.  Now we will discuss different approaches to using branches, from the very simple to the complex.</p>"},{"location":"git/tips/branching-stragegies/#local-branches-only-strategy","title":"Local Branches only Strategy","text":"<p>Branches created locally.  Any changes to be shared are merged into the master branch first then that master branch is pushed to a common repository.</p>"},{"location":"git/tips/branching-stragegies/#advantages","title":"Advantages","text":"<ul> <li>Very simple to use.</li> <li>Only 1 branch to keep in sync with everyone else.</li> </ul>"},{"location":"git/tips/branching-stragegies/#limitations","title":"Limitations","text":""},{"location":"git/tips/branching-stragegies/#github-pull-model","title":"Github Pull Model","text":"<p>Branches created locally.  Any changes to be shared are merged into the master branch first then that master branch is pushed to a common repository.</p>"},{"location":"git/tips/branching-stragegies/#advantages_1","title":"Advantages","text":"<ul> <li>Quite simple to use.</li> <li>Can work with multiple shared branches</li> <li>Provides easy way to review, discuss and document changes</li> </ul>"},{"location":"git/tips/branching-stragegies/#limitations_1","title":"Limitations","text":"<ul> <li>Requires a services such as Github that supports pull requests</li> </ul>"},{"location":"git/tips/branching-stragegies/#git-flow","title":"Git Flow","text":"<p>...</p>"},{"location":"git/tips/branching-stragegies/#advantages_2","title":"Advantages","text":"<ul> <li>It makes you learn git really well </li> <li>It can help with larger teams</li> </ul>"},{"location":"git/tips/branching-stragegies/#limitations_2","title":"Limitations","text":"<ul> <li>It may be overkill</li> <li>Learning curve for adoption, not to be rushed into</li> <li>Need to ensure everyone understands the flow, human error easily introduced</li> <li>Relying on tools to manage the flow can mean problems harder to fix if something goes wrong, as people may not understand the flow enough.</li> </ul> <p>See the Git Flow section for more details.</p>"},{"location":"git/tips/common-pitfalls/","title":"Git Common Pitfalls","text":"<p>Here are some common pitfalls that people experience when using git and of course ways to dig yourself out of them.</p>"},{"location":"git/tips/common-pitfalls/#loosing-your-head","title":"Loosing your head","text":"<p>Confusing Git leads to your confusion</p>"},{"location":"git/tips/common-pitfalls/#staging-and-commiting-to-the-wrong-branch","title":"Staging and Commiting to the wrong branch","text":"<p>[Undo a commit to a local branch ]</p> <p>If using the command line for git, enhance your prompt to display the current branch you are on.</p> <p>Use Git status ....</p> <p>Learn how to use your git tool well, so that it visualises the current branch you are on or asks / checks you are pushing to the correct branch.</p>"},{"location":"git/tips/common-pitfalls/#pushing-to-the-wrong-repository","title":"Pushing to the wrong repository","text":"<p>Warn everyone immediately, the longer you wait the more pain people will feel. </p> <p>Best approach is to create a new commit that resolved the problem you just created.</p>"},{"location":"git/tips/common-pitfalls/#staging-the-wrong-files","title":"Staging the wrong files","text":"<p>Learn to use git diff well to see the changes before you add them.</p> <p>Use git status to see which files have been modified and which ones you have addded.</p> <p>[Undo staging a file, when tracked and untracked]</p>"},{"location":"git/tips/common-pitfalls/#staging-unwanted-changes-in-a-file","title":"Staging unwanted changes in a file","text":"<ul> <li>eg whitespace, formatting changes </li> </ul> <p>Use <code>git add -p filename</code> to select only the lines (hunks) you want to stage.</p> <p>Use <code>git checkout filename</code> to reset the file to be the same as that committed in Git, wiping out any unwanted changes (perhaps made by mistake or by your code writing tools).</p>"},{"location":"git/tips/creating-a-branch/","title":"Managing Changes with Branches","text":""},{"location":"git/tips/creating-a-branch/#why-branch","title":"Why Branch","text":"<ul> <li>an easy way to experiment with code, as a branch can easily be discarded</li> <li>Branches help you merge specific commits into another branch </li> <li>Allows you to keep all your code in commits all the time.</li> <li>Branching is quick and relatively simple</li> </ul>"},{"location":"git/tips/creating-a-branch/#how-to-branch","title":"How to Branch","text":"<ul> <li>should already be covered in the Git Basics Workshop</li> </ul>"},{"location":"git/tips/creating-a-branch/#erm","title":"Erm","text":""},{"location":"git/tips/git-flow/","title":"Git Flow","text":"<p>An altogether more complex workflow for masochists...</p>"},{"location":"git/tips/github-workflow/","title":"Github Workflow - using Pull Requests","text":"<p>[TODO] explain how Github uses the pull request process to support development over distributed teams.</p>"},{"location":"git/tips/merging-changes/","title":"Merging Changes","text":""},{"location":"git/tips/merging-changes/#pulling-from-shared-repositories","title":"Pulling from shared repositories","text":"<p>Github etc.</p>"},{"location":"git/tips/merging-changes/#merging-local-branches","title":"Merging local branches","text":""},{"location":"git/tips/merging-changes/#merging-specific-commits-cherrypicking","title":"Merging specific commits - cherrypicking","text":""},{"location":"git/tips/understanding-hunks/","title":"Understanding Hunks in Git","text":"<p>A hunk in Git terms is a line or several consecutive lines of a file that have changed since the last commit.</p> <p>Git identifies hunks in the files you change and when you use interactive staging you can be more selective about the hunks you add to the next commit.</p> <pre><code>git add -p\n</code></pre> <p>[Examples of hunks]</p>"},{"location":"git/tips/understanding-hunks/#splitting-hunks","title":"Splitting Hunks","text":"<p>[TODO] how does git decide where to split Hunks ?</p>"},{"location":"git/to-review/git-basics/","title":"Gith and Github Workshop","text":"<p>This tutorial will give you a practical guide to using the Git version control tool to managing changes to source code and configuration files in projects.  The tutorial also covers collaborating on projects using Github public repositories.  You can either read an overview of Git</p>"},{"location":"git/to-review/git-basics/#setting-up-git-github","title":"Setting up Git &amp; Github","text":"<ul> <li>Choose your git client</li> <li>Identify yourself to Git</li> <li>Create an account on Github</li> </ul>"},{"location":"git/to-review/git-basics/#creating-git-projects","title":"Creating Git Projects","text":"<ul> <li>Creating a Git managed project</li> <li>Ignoring files</li> </ul>"},{"location":"git/to-review/git-basics/#local-git-workflow","title":"Local Git Workflow","text":"<ul> <li>Checking the status - what has changed -- git status, git diff </li> <li>Staging changes  - basic add, git add -p, unstaging untracked files, unstaging tracked files, git diff --cached </li> <li>Committing a new version </li> <li>Git log </li> <li>Chapter 7: The local git workflow</li> </ul>"},{"location":"git/to-review/git-basics/#branching-merging-why-do-this","title":"Branching &amp; Merging  - why do this","text":"<ul> <li>try out code and modifications to design, different algorithms </li> <li> <p>easily discard changes that are not needed - or leave them in a branch so they are not affecting / poluting the main codebase</p> </li> <li> <p>Branching and Merging</p> </li> <li>merging changes</li> </ul>"},{"location":"git/to-review/git-basics/#collaborating-with-other-developers-using-git-and-github","title":"Collaborating with other developers using Git and Github","text":"<ul> <li>Chapter 10: Collaborating with Github</li> <li>Practices to avoid when using shared repos like Github</li> <li>rebasing, forgetting to push changes (especially for sub modules)</li> </ul>"},{"location":"git/to-review/git-basics/#troubleshooting","title":"Troubleshooting]","text":"<ul> <li>what to do if you loose your head </li> <li>if you really have to change a commit</li> <li>unstage changes</li> </ul>"},{"location":"git/to-review/git-basics/#resources","title":"Resources","text":"<ul> <li>Git submodules</li> </ul>"},{"location":"git/to-review/git-basics/#git-local-workflow-visualised","title":"Git local workflow visualised","text":"<p>You can quickly get versioning your code with Git, all on your own computer.  You do not need to set up a server.</p> <p></p>"},{"location":"git/to-review/git-basics/#git-and-github-workflow-visualised","title":"Git and Github workflow visualised","text":"<p>To give you a big picture view of how you use Git and Github, here is a visualisation of the workflow for both.  The details of this workflow are ocvered in the workshop from Chapter 10: Collaborating with Github onwards.</p> <p></p>"},{"location":"git/to-review/git-basics/#reference","title":"Reference","text":"<ul> <li>Git essential commands for the most common commands for using Git</li> <li>Git Visual cheat sheet</li> <li>Git Reference</li> <li>Learning Version Control wth Git - git-tower.com</li> <li>StarLogs.net demo from my blog</li> </ul> <p>Last update: Tue 28 Oct 2014 10:10:44 GMT</p>"},{"location":"git/to-review/git-basics/aliases-for-nicer-git-output/","title":"Aliases for nicer Git output","text":"<p>Just like the Unix shell, you can add aliases to Git as short-cuts to the command that you use frequently, so you can use git even more effectively.</p> <p>Defining aliases for those tricky to remember commands you dont use very often, but help you get yourself out of trouble with Git.</p>"},{"location":"git/to-review/git-basics/aliases-for-nicer-git-output/#git-log","title":"Git Log","text":"<p>The default <code>git log</code> command is very verbose in its output, especially when you have many commits.  Using a few options to the git log command you can get a much more useful output.</p>"},{"location":"git/to-review/git-basics/aliases-for-nicer-git-output/#oneline","title":"oneline","text":"<p>As you can probably guess, the <code>--oneline</code> option puts all the information of a commit on one line.  This commit information is the abreviated commit number and the commit message.</p>"},{"location":"git/to-review/git-basics/aliases-for-nicer-git-output/#graph-option","title":"graph option","text":"<p>This displays the log as a graph showing where branching and merging has taken place</p>"},{"location":"git/to-review/git-basics/aliases-for-nicer-git-output/#decorate-option","title":"decorate option","text":"<p>This shows which branches are on which commit versions, including remote repositories that have been added to the local repository.  So you can easily see the most recent commit for repository and branch.  This information help you understand if you need to push or merge commits between repositories and branches.</p>"},{"location":"git/to-review/git-basics/aliases-for-nicer-git-output/#add-the-git-log-alias","title":"Add the Git log alias","text":"<p>Putting these three options together in the alias file: </p> <pre><code>[alias] \n  lg = log --oneline --graph --decorate\n</code></pre>"},{"location":"git/to-review/git-basics/aliases-for-nicer-git-output/#hardcore-customisation","title":"hardcore customisation","text":"<p>You can also define exactly what information you want displayed each line of the Git log (and in what color) using the <code>--pretty</code> option </p> <pre><code>[alias] \n  lp = log \n       --graph \n       --pretty=format:\n         '%C(cyan)%h%Creset - %C(bold yellow)%d%Creset %s %C(blue)(%ar) %C(magenta)%an%Creset' \n       --all\n</code></pre> <p>The above alias should all be on one line in the .gitconfig file</p>"},{"location":"git/to-review/git-basics/aliases-for-nicer-git-output/#other-useful-aliases","title":"Other useful aliases","text":"<p>When you become a regular git user you will notice you type <code>git status</code> very often.  You may also notice it is also quite verbose in its output.  Once you know the different stages of your workflow of changes (untracked, modified, staged) you simply get a summary view of the status by using the <code>-s</code> option</p> <p><code>git status -s</code></p> <p></p> <p>I also like to add branch information to my status output....</p> <pre><code>[alias] \n  sitrep = status -sb\n  sr = status -sb\n  word = diff --word-diff\n  unstage = reset HEAD\n</code></pre> <p>Read the official documentation on git customisation for more options.</p>"},{"location":"git/to-review/git-basics/chapter10-collaborating-with-github/","title":"Collaborating with Github","text":"<p>Everyone has their own repository locally</p> <p>Everyone has their own local development environment - using their ide &amp; foreman</p> <p>Developers can spin up another application on heroku as a different environment.  Every time a new heorku app is created, a new git repository is created.  This gives a lot of flexibility when it comes to managing changes, although you need to manage the progression of your changes through each repository.</p> <p>Using git log --decorate you can see the relative progression of your changes as commits to each repositories.</p> <p>When you are working with multiple heroku applications, then using environment variables will allow you to manage resource configuration in each environment.  Hard coding configuration information in your application will not lead to a very secure, stable or scalable application.</p> <p>Back to top...</p> <p>Workshop homepage</p>"},{"location":"git/to-review/git-basics/checking-for-changes/","title":"Checking for Changes","text":"<p>Git provides several commands to help you see changes in your project files, helping you manage your project easily and helping you capture small and coheirent changes.</p>"},{"location":"git/to-review/git-basics/checking-for-changes/#git-status","title":"Git Status","text":"<p>Even experienced Git users will run the <code>git status</code> command very frequently.  This command gives you an overview of all the files that contain changes, changes that have been staged and any files Git is not currenly tracking </p> <p>untracked files are those that have not been added to the Git repository</p> <p>If you are using a GUI client for Git, it may be running <code>git status</code> regularly in the background so the information it is displaying is up to date.</p> <p>Git status only shows the changes happening locally, it will not show changes on any remote repository (ie. on Github).  See the section on <code>git log</code> for tracking changes in remote repositories.</p> <p>{% note info Exercise 1 %} This is a note, I wonder if it works.  Yes it does, but it looks just like a blockquote using the &gt; notation</p>"},{"location":"git/to-review/git-basics/checking-for-changes/#git-diff","title":"Git Diff","text":"<p>Compare changes between the working copy and the staging area.  You can compare all files in the project or just the changes in a specific file or filename pattern </p> <pre><code>git diff \ngit diff filename \ngit diff *.md\n</code></pre> <p>Compare changes between the staging area and the latest commit </p> <pre><code>git diff --cached \ngit diff filename --cached\ngit diff *.md --cached\n</code></pre> <p>Compare changes against a specific commit (version)</p> <pre><code>git diff v1.09       ; compare working directory against specific version\ngit diff dev master   ; difference between two branches\n</code></pre> <p>Using the <code>--stat</code> option to see just the statistics about the changes - eg, you want to see the number of changes rather than all the change details.</p> <pre><code>git diff v1.09 --stat\n</code></pre>"},{"location":"git/to-review/git-basics/configure-git/","title":"Identify yourself to Git","text":"<p>There are lots of useful things to add to your git configuration.  The most important thing is to set up your git user name and email, so people know who is creating commits.  To add your username and email to git, either edit the <code>~/.gitconfig</code> file or run the following two commands:</p> <pre><code>git config --global user.name \"your name\"\ngit config --global user.email \"your.name@domain.com\"\n</code></pre> <p>You should use the same email address you have used for your Github account to make things easier.</p> <p>To check what has already been added to Git (some gui clients add information to your gitconfig), you can list all the current configuration entries using the command:</p> <pre><code>git config --list\n</code></pre> <p>Later in this workshop we will see how to set up aliases for the commands and options you regularly use.  We will also show how to set up specify tools for merging changes and viewing diffs (differences between files and commits).</p> <p>Read the official documentation on git customisation for more options.</p>"},{"location":"git/to-review/git-basics/create-a-git-repository/","title":"Clone the Github repository","text":"<p>You previously created a repository on Github so that you can share your code and versions with others.  However the changes to your source code files happen on your laptop, so we need to first make a copy of the Github repository on your laptop.  </p> <p>We take a complete copy of the repository on Github repository with all its history, creating an exact clone of it locally on the laptop.  This is called Cloning and uses the command <code>git clone alias URL [directory]</code>, where <code>alias</code> is the short name for the repository <code>URL</code> and <code>directory</code> is an optional directory in which to create the repository</p>"},{"location":"git/to-review/git-basics/create-a-git-repository/#clone-your-github-repository","title":"Clone your Github repository","text":"<p>Change into a suitable directory on your laptop, eg <code>my-projects</code>.  Then clone the Github repository using the command:</p> <pre><code>git clone github git@github.com:jr0cket/git-basics-example git-basics\n</code></pre> <p>This creates a directory called <code>git-basics</code>.  Inside this directory is another called .git which is your local copy of the repository (so dont delete the .git directory)</p>"},{"location":"git/to-review/git-basics/create-a-git-repository/#create-a-local-git-repository","title":"Create a local Git repository","text":"<p>Now you have a project you want to version, we are going to create a local repository  Change into the new folder created for your project.  Then create a new git repository using the git initialise command:</p> <pre><code>cd my-projects   \ngit init\n</code></pre> <p>You have just created an empty local git repository.  In effect, you have created the .git folder within your project that will contain all the change history and changes themselves as the project develops.  You dont need to understand what goes on in the .git folder, but you do need to remember that if you delete it then all your change history is deleted.</p> <p></p>"},{"location":"git/to-review/git-basics/create-a-git-repository/#viewing-changes-to-files-working-copy","title":"Viewing changes to files (working copy)","text":"<p>To see what changes you could commit to git, use the git status command:</p> <pre><code>git status\n</code></pre> <p>If you have files in your project they will show up as untracked files when you do a git status.  This means that these files have yet to be put under git version control.  You will soon see that git status is used all the time to let you know what the current situation is with your changes.</p>"},{"location":"git/to-review/git-basics/create-a-git-repository/#preparing-to-version-your-changes","title":"Preparing to version your changes","text":"<p>To tell git what changes you want to version, you tell git which files you want to add to make up part of the next commit using the git add command.  You can specify a particular file or you can add all files at once.</p> <p>To add a specific file</p> <pre><code>git add filename.ext\n</code></pre> <p>To add all files that have been altered or added to the working copy since the last commit:</p> <pre><code>git add .\n</code></pre> <p>Adding files to git is not the same as doing a commit.  With git add you are preparing one or more files to be committed.  When you add a file, it is placed in what is called the staging area (or index).  Staging files is a useful way to group changes over multiple files in order to make a meaningful commit.  In Chapter 7 - the local git workflow, we will cover the staging area and other steps in Git.</p> <p>To see what files are staged at any time, you use the git status command.</p>"},{"location":"git/to-review/git-basics/create-a-git-repository/#commit-your-changes-to-the-local-repository","title":"Commit your changes to the local repository","text":"<p>When you have told git about all the changes you want to add, you use the <code>git commit</code> command.  </p> <p>For each commit, you should provide a meaningful message that explains what you have commited.  When you run the commit command, your default editor will open for you to type in the commit message.  Alternativley you can specify the message with the <code>-m</code> option</p> <pre><code>git commit -m \"meaningful message describing the commit\"\n</code></pre> <p>For additional changes you continue the cycle of adding files (staging them) and then committing those changes.  This gives you a very detailed history of changes, so you can see how the project has evolved, step back in time and more easily merge changes from different developers.</p> <pre><code># edit files\ngit add filename\ngit commit -m \"describe the change\"\n</code></pre>"},{"location":"git/to-review/git-basics/create-a-git-repository/#viewing-the-history-of-changes","title":"Viewing the history of changes","text":"<p>You can see all the changes that have been committed to your local repository using the <code>git log</code> command.</p> <p>By default, <code>git log</code> shows a very verbose commit history.  Using options with the git log command you can make the output easier to read.</p> <pre><code>git log --oneline --graph --decorate\n</code></pre> <ul> <li><code>--oneline</code> shows the commit details on a single line </li> <li><code>--graph</code> shows where branches and merges have been made in the history</li> <li><code>--decorate</code> shows which commit version </li> </ul> <p>[TODO: image of git log]</p>"},{"location":"git/to-review/git-basics/create-github-account/","title":"Create an account on Github","text":"<p>Git hub adds extra collaboration features over git, providing a social coding service which is an excellent resource for working on projects as a team and running open source projects.  Anyone can get a copy of code (clone) in your public repositories, whether or not they have an account on Github.  You don't need any access permissions to do so.</p> <p>If you want to work on a project where you are not a collaborator, you can fork a repository and either develop using that new repository yourself or create pull requests that are sent to the collaborators of the original project.</p> <ul> <li> <p>Forking a repository - creates a new github repositiory for you from a github repository owned by another person or organisation. You have full commit access to this new repository, because its owned by you.</p> </li> <li> <p>Creating a pull request - sends a message to the committers on the original project (the one you forked), inviting them to pull your changes into their project.</p> </li> </ul> <p>To create a free account on Github, go to www.github.com and follow the instructions.</p>"},{"location":"git/to-review/git-basics/create-github-account/#make-committing-code-easier-by-upload-your-public-key","title":"Make committing code easier by upload your public key","text":"<p>Any time you send code to github it is done over a secure connection and therefore you have to identify yourself.  This means you either have to enter your username / password frequently or add those details to your IDE (eg. Eclipse, Intellij, Netbeans, etc.), which may save them as plan text.</p> <p>Rather than use your username and password, pubic key encryption can be used to identify yourself to github (and other services like heroku).  Once you have added the public key to github, every time you connect to github then that key is used to automatically identify you.</p> <p>You can create and add your public key using the excellent instructions on the gthub website</p> <p>If you have already set up Heroku Toolbelt and used the command heroku login then you may already have a public key.  The key that heroku created can also be used for github, assuming you have used the same email address for both accounts.</p>"},{"location":"git/to-review/git-basics/create-your-project/","title":"Creating a Git version controlled project","text":"<p>Create a new folder / project by either creating the project structure yourself or using a build tool to create it for you.  Here are some of the example build tools you could use:</p> <pre><code>## Node project\nnpm init\n\n## Node project via Grunt-init\ngrunt-init my-template\n\n## Project via Yoman generator \nyo generator\n\n## Java project with Maven \nmvn new my-project\n\n## Clojure project with Leiningen \nlein new my-project\n\n## Scala project using Play framework\nplay new my-project\n</code></pre> <p>Now you can see all the files you have created as untracked files in git using</p> <pre><code>git status\n</code></pre> <p>Show example screenshots of git status output for the above projects</p>"},{"location":"git/to-review/git-basics/creating-a-branch/","title":"Branch &amp; merge","text":"<p>Unless branches represent a completely isolated component in your project, then branches should be short lived.  This makes them easier to work with, easier to merge and easier to get rid of when you dont need them.</p> <p>Rebasing (I dont like doing this on shared repos, your loosing tracability because you are rewriting history).  There may be some merit when a team is working very closely on the same part of the code, where there is a lot of communicaton going on.</p> <p>Can use ... from labs to automatically deploy onto heroku from Github - probably dont want to do this for production - or at least make sure than anyone who triggers an automatic deploy knows that they are doing so.</p> <p>Back to top...</p> <p>Workshop homepage</p>"},{"location":"git/to-review/git-basics/git-clients/","title":"Choose your git client","text":"<p>For the workshop the command line will be used so you can focus on understanding the commands that are used.</p> <p>You can follow along with either a command line or graphical git tool.  Please note that installing a graphical tool for git should also provide git on the command line, so no need to install both!</p>"},{"location":"git/to-review/git-basics/git-clients/#command-line-tools","title":"Command Line tools","text":"<p>You can simply install the git command line tools from www.git-scm.com.</p> <p>If you have Ubuntu, then you can use the Ubuntu software center or install git on the command line</p> <pre><code>apt-get install git\n</code></pre>"},{"location":"git/to-review/git-basics/git-clients/#gui-tools","title":"GUI tools","text":"<p>The simplest graphical tools to install are from Github.  If you browse any repository on www.github.com you will notice a \"Clone in Mac\" or \"Clone in Windows\" button at the top left of the page.  If you have not Git tool installed, then you are redirected to a page offering to install the Github graphical git client for you.</p> <p>Github client for MacOSX Github client for Microsoft Windows</p> <p>There are many other Git GUI tools listed on git-scm.com for Linux, MacOSX and Windows.  A very comprehensive Git GUI is SourceTree for MacOSX &amp; Windows</p>"},{"location":"git/to-review/git-basics/git-in-2-minutes/","title":"Git in 2 minutes","text":"<p>If you have installed Git and know the basic theory of version control, here are the basic commands to get you going:</p> <pre><code>;; Tell Git who you are (only done once)\ngit config --global user.name \"your name\"\ngit config --global user.email \"your.name@domain.com\"\n\n;; Initialise a local repository (inside your project directlory)\ngit init\n\n;; See the status of your files and all uncommited changes\ngit status\n\n;; Tell Git which changes you want to make part of the next commit (staging)\ngit add filename       ; to add a specific file\ngit add .              ; to add everything\ngit add *.HTML         ; add all html files\n\n;; Commit those files to create a new version \ngit commit -m \"meaningful commit message\"\n\n;; Push your code to a remote repository (eg. Github)\ngit remote add repo-name git@github.com:github-account/repo-name.git\ngit push repo-name master\n</code></pre> <p>The <code>;</code> character is a comment</p> <p>To see the basics of Git useage visualised, here is a diagram of the local git workflow:</p> <p></p>"},{"location":"git/to-review/git-basics/git-overview/","title":"Overview of Git and Github","text":"<p>Git is a very powerful tool for managing the changes you make as you develop source code for your software projects.  Typically those changes tracked are the ones made to source code and configuration files.  Git understands how to merge text files together, allowing you to pull in changes from others.  It also helps you compare changes in different versions of text files using the diff tool.</p> <p>You can also manage binary files such as images and propriatory document formats, although git does not typically come with tools that help you merge or compare differences.</p> <p>Before the creation of Git (and Mercurial, Bazar and a few others), most versioning tools for source code used what is called a central model.  Tools like CVS and SVN manage code changes in a single central server, shared across teams and the whole company.  When developers work on code they only get a copy of current code locally on their development machine.  To actually do any commits, to version the code, then they have to connect with the server.  When looking at history and any other activitiy, developers have to communicate with the central server.  If this server is off line or slow, then this can lead to problems working effectively together as a team.</p> <p>Git uses a distributed approach to managing changes (as does bazar &amp; mercurial).  This approach may seema little more complicated at first, but adds far more control and visiblity to your projects.</p> <p>A distributed model means that everyone involved gets a complete copy of the project repository.  It is still common to have a shared repository that holds all the code (e.g. on Github), although this can easily be changed and may evolve over time.</p> <p>Using Git, developers create a copy of a project repository on their development machine, this is called cloning.  This creates a local copy of the repository along with all the files managed by git in your project.  As you have a local repository, all the code changes that  have ever been made are right there giving you a full history of the project.</p> <p>One of the benefits of git therefore is to be able to constantly commit changes, regardless of if you are connected to a shared repository.  You commit all your changes locally first (even if you are connected) and then when ready you can push your changes to a shared repository.</p> <p>It is common to have a common shared repository that is seen as the canonical version of the code for a project.  The core members of the project team, refered to as committers have direct access to update this shared repository.  Anyone with access to the project repository can take a copy (clone).</p> <p>Should you wish to work on the project you can create your own copy, called a fork.  Your fork is your own exact copy of the oringinal repository, including all the history.  As this is your repository, you can commit changes directly.</p> <p>Should you wish to submit your chages back to the original project, you can create a pull request from your fork.  A pull request is a message and one or more commits that are sent to the original project team, inviting them to pull in the changes from your forked repository.</p>"},{"location":"git/to-review/git-basics/github-overview/","title":"Overview of Git and Github","text":"<p>Git is a very powerful tool for managing the changes you make as you develop source code for your software projects.  Typically those changes tracked are the ones made to source code and configuration files.  Git understands how to merge text files together, allowing you to pull in changes from others.  It also helps you compare changes in different versions of text files using the diff tool.</p> <p>You can also manage binary files such as images and propriatory document formats, although git does not typically come with tools that help you merge or compare differences.</p> <p>Before the creation of Git (and Mercurial, Bazar and a few others), most versioning tools for source code used what is called a central model.  Tools like CVS and SVN manage code changes in a single central server, shared across teams and the whole company.  When developers work on code they only get a copy of current code locally on their development machine.  To actually do any commits, to version the code, then they have to connect with the server.  When looking at history and any other activitiy, developers have to communicate with the central server.  If this server is off line or slow, then this can lead to problems working effectively together as a team.</p> <p>Git uses a distributed approach to managing changes (as does bazar &amp; mercurial).  This approach may seema little more complicated at first, but adds far more control and visiblity to your projects.</p> <p>A distributed model means that everyone involved gets a complete copy of the project repository.  It is still common to have a shared repository that holds all the code (e.g. on Github), although this can easily be changed and may evolve over time.</p> <p>Using Git, developers create a copy of a project repository on their development machine, this is called cloning.  This creates a local copy of the repository along with all the files managed by git in your project.  As you have a local repository, all the code changes that  have ever been made are right there giving you a full history of the project.</p> <p>One of the benefits of git therefore is to be able to constantly commit changes, regardless of if you are connected to a shared repository.  You commit all your changes locally first (even if you are connected) and then when ready you can push your changes to a shared repository.</p> <p>It is common to have a common shared repository that is seen as the canonical version of the code for a project.  The core members of the project team, refered to as committers have direct access to update this shared repository.  Anyone with access to the project repository can take a copy (clone).</p> <p>Should you wish to work on the project you can create your own copy, called a fork.  Your fork is your own exact copy of the oringinal repository, including all the history.  As this is your repository, you can commit changes directly.</p> <p>Should you wish to submit your chages back to the original project, you can create a pull request from your fork.  A pull request is a message and one or more commits that are sent to the original project team, inviting them to pull in the changes from your forked repository.</p>"},{"location":"git/to-review/git-basics/ignoring-files/","title":"Ignoring files","text":""},{"location":"git/to-review/git-basics/ignoring-files/#ignoring-files","title":"Ignoring files","text":"<p>There are often files inside your project that you do not want to put into git, these typically includes</p> <ul> <li>Backup files</li> <li>Developer tool configurations</li> <li>Compiled source code</li> <li>Graphics, sound and video files</li> <li>Binary document formats</li> </ul> <p>Telling Git to exclude these types of files will prevent them appearing in your git status report as untracked files and help you focus on managing those files that should be versioned.</p> <p>You can add your project exclusions using filennames, folders and filename patterns.  All these exclusions go into a project file called</p> <pre><code>my-project-folder/.gitignore\n</code></pre> <p>To keep your project .gitignore file simple and focused on the project, any files and patterns you want to ignore that are created by your own development environment (IDE, build tools, etc.) should be placed in a global ignore file, typically:</p> <pre><code>~/.gitignore_global\n</code></pre> <p>Github has a large collection of .gitignore files for different programming languages and tools.</p> <p>Back to top...</p> <p>Workshop homepage</p>"},{"location":"git/to-review/git-basics/local-git-workflow/","title":"The local git workflow","text":"<p>To recap, we have our working copy of our files on our laptop.  When we add those files using git, a copy is placed in what git calls Staging.  This allows you to assemble several files for the commit.</p> <p>As we have a local repository right there on our laptop, we can commit all the files added to the staging area.  If you can add a series of small commits and do this often, it gives you a more detaled version history and gives you more points to jump back in time.  Regular commits helps to reduce merge conflicts when working in teams and using smaller commits gives other developers lots of details about how the project has evolved.</p> <p>In this visual representation you can see the different git stages in which commits can reside.</p> <p></p>"},{"location":"git/to-review/git-basics/local-git-workflow/#understanding-git-add-and-the-staging-area","title":"Understanding git add and the staging area","text":"<p>When you add a file, you are telling git that you want it to be part of the change you are going to commit.</p> <p>Lets say you create a new file with 10 lines of content and then use git add filenname.ext to add it to git.  Then you continue to add another 5 lines the contents of that file.  If you do a commit without adding that file to git again, only the first 10 lines of content will be in that commit.</p> <p>If you do a second git add filenname.ext before you commit, then all 15 lines of content will be included in the commit.</p> <p>Having to add changes in this way helps you control exactly what makes up your commit without restricting the files you are working on.  Please note that it is advisable to either git add &amp; git commit often so that your changes form part of a meaningful history.</p>"},{"location":"git/to-review/git-basics/local-git-workflow/#what-has-been-added-what-has-changed-using-diff","title":"What has been added - What has changed (using diff)","text":"<p>Once you have added files to the staging area with git add, you can compare any changes made to files in your workspace.  Using git diff you can see all changes or specifying a file will show only the differences in that one file.</p> <pre><code>git diff\ngit diff filename\n</code></pre> <p>You can also compare the files you have added to the staging area to those you have committed using the diff option --staging</p> <pre><code>git diff --staging\ngit diff --staging filename\n</code></pre>"},{"location":"git/to-review/git-basics/local-git-workflow/#removing-files-from-staging-index","title":"Removing files from staging / index","text":"<p>You can remove a file you have put in staging (git add filename) using the git command reset</p> <pre><code>git reset --soft HEAD^\n</code></pre> <p>rolling back to the previous commit on the local repo     git reset HEAD~1</p>"},{"location":"git/to-review/git-basics/local-git-workflow/#to-remove-a-file-from-the-indexstaging","title":"To remove a file from the index/staging","text":"<pre><code>git rm --cached filename.txt\n</code></pre>"},{"location":"git/to-review/git-basics/local-git-workflow/#commit-your-changes","title":"Commit your changes","text":"<p>Once you have staged files using the <code>git add</code> command, you can at any point make those files a commit (think a new version).  The commit will contain all the files you added.</p> <pre><code>git commit -m \"useful message describing the details of your commit\"\n</code></pre> <p>The better commit messages you write the easier it is for others (and yourself) to understand what is going on in your project.</p>"},{"location":"git/to-review/git-basics/local-git-workflow/#working-with-commits-git-log-git-show","title":"Working with commits - git log, git show","text":"<p>Once you have done a commit and there are no more changes in your working directory or staging area, then git status no longer tells you anything.  This is where git log comes in.</p>"},{"location":"git/to-review/git-basics/local-git-workflow/#git-log","title":"git log","text":"<p>Git log shows you the history of the commits you have already made.</p> <pre><code>git log\n</code></pre> <p>By default, git log has a very basic output and shows you the commit number, author, date and commit message.  You can add options to the git log command to get a much nicer and more useful output, even showing which commits have been pushed to one or more remote repositories. </p> <pre><code>git log --graph --oneline --decorate --date-relative\n</code></pre> <p>You can add this to your git configuration as an alias so you dont have to type it all the time</p> <pre><code>git config --global alias.lg 'log --graph --oneline --decorate --date-relative'\n</code></pre>"},{"location":"git/to-review/git-basics/local-git-workflow/#blogs-on-this-subject","title":"Blogs on this subject","text":"<ul> <li>Git basic tips and tricks</li> <li>Must have alias examples</li> </ul>"},{"location":"git/to-review/git-basics/local-git-workflow/#git-show","title":"git show","text":"<p>Git show displays the contents of a commit (description, files, tags, blobs, etc).  By default it shows the log message and textual diff of the text that was modified in the commit. </p> <p>For tags, it shows the tag message and the referenced objects.</p> <p>The command takes options applicable to the git diff-tree command to control how the changes the commit introduces are shown.</p> <p>[TODO] what are the options for git show </p> <pre><code>git show\ngit show HEAD\ngit show 1234567\ngit show tag-name\n</code></pre> <p>Using git show without specifying a commit number or tag will show you the latest commit from the branch you are currently in.  This is usually the same information in git show HEAD as HEAD is a special tag that always points to the latest commit.</p> <p>Back to top... | Next: Chapter 08: Conflict Resolution | Workshop homepage</p>"},{"location":"git/to-review/git-basics/merging-changes/","title":"Merging changes","text":""},{"location":"git/to-review/git-basics/merging-changes/#conflict-resolution-managing-the-merge-process","title":"Conflict resolution - managing the merge process","text":"<p>During the development of your project you will make many changes to your files.  If you follow the \"commit early, commit often\" idea, then most of your commits should be straight forward.</p> <p>Git is very good at merging changes together, although it has its limitations.</p> <p>The longer you leave a change to be commited or the bigger the change is you are making (especially to existing files), the more likely you will have to manage the merge process yourself.  </p>"},{"location":"git/to-review/git-basics/merging-changes/#a-common-merge-conflict-with-github","title":"A common merge conflict with Github","text":"<p>When you create a new repository on Github you are given the choice of creating a Readme.md file and a .gitignore file for one of numerous languages.  These are both really useful things to have.</p> <p>However, if you already have a repository locally with a number of commits, when you create a github repository with these files then you are actually making a commit on the github repository as well.</p> <p>This leaves you with commits locally that you dont have on your github repository and a commit on your Github repository that you dont have locally.  As the commit is newer on the Github repository, then git will not push your local changes as it will not create a \"fast-forward\" commit.  A fast-forward commit is newer than any existing commits in that repository.</p> <p>To resolve this conflict, you have to pull the change you made in the Github (addint a Readme.md and/or .gitignore file) to your local repository.  This is done with the ommand:</p> <pre><code>git pull &lt;repository&gt; &lt;branch&gt;\ngit pull github master\n</code></pre> <p>As your changes are out of sync between the local and Github repository, then you will have to manually merge those changes.</p> <p>Assuming you did not create a Readme.md or .gitignore file locally, then when you pull you should be able just git add the additional files and commit them with git commit.  Then you can finally push all these changes up to the Github repository.</p> <p>If you already had either the Readme.md file or .gitignore file locally, when you do a git pull the text from both versions of the file will be combined, with &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; markers denoting which text comes from which version .</p> <p>There is also a nice page on Github help on dealing with non fast-forward errors.  </p>"},{"location":"git/to-review/git-basics/merging-changes/#working-with-pull-requests","title":"Working with pull requests","text":"<p>If you have a pull request that cant be automatically merged.  A committer on the project can offer suggestions on how the submitter can fix the pull request so it can be merged.  This typically includes:</p> <ul> <li>ensuring the submitter of the pull request has pulled all the changes down from the latest version of the original project.</li> <li>merging any changes between their code and the original project</li> </ul> <p>Once any merge conflicts are resolved, the submitter of the pull request can do another commit locally and to their forked repository on github and that will update the pull request automatically.</p> <p>Back to top...</p> <p>Workshop homepage</p>"},{"location":"git/to-review/git-basics/readme/","title":"A beginners guide to Git and Github","text":"<p>This is a step by step guide to getting going with Git, the distributed version control system.</p> <p>The workshop is deployed on Heroku at: http://git-and-github-workshop.herokuapp.com/.</p> <p>This guide covers the essential features so you can start to use Git to manage your changes in a local repository and then moves on to Github so you can share your managed code with the outside world.</p> <ul> <li>git command line / graphical tool set up on your laptop</li> <li>understanding staging, committing and pushing changes</li> <li>working with git status and git log to manage changes</li> <li>experience using github for new repos as well as forking &amp; cloning</li> <li>managing multiple repositories easily with git log</li> <li>working with pull request</li> </ul> <p>This workshop is focused on using git as a developer and will not be diving under the covers of git, or covering any implementation details.</p>"},{"location":"git/to-review/git-basics/readme/#creating-a-markdown-driven-website-on-heroku","title":"Creating a markdown driven website on Heroku","text":"<p>To create and deploy a static web site from Markdown files on Heroku, using the following instructions:</p> <ol> <li> <p>Create a folder for your project and start writing your content.  You should use an <code>index.md</code> file as you website home page:</p> </li> <li> <p>Inside your project folder, create a git repo containing the file:</p> <pre><code>cd my-project-folder\ngit init\ngit add index.md\ngit commit -m \"Initial project setup\"\n</code></pre> </li> <li> <p>Once the project is under git control, lets create an Heroku application on which to deploy it.  As we are doing something a little different from the usual, we need to specify a specific build pack to tell Heroku how to build, deploy and run our website:</p> <pre><code>heroku create --buildpack https://github.com/jamesward/heroku-buildpack-markdown.git\n</code></pre> </li> </ol> <p>You can optionally specify a name for your website whilst creating it, although this name must be unique within the herokuapps.com domain:</p> <pre><code>    heroku create --buildpack https://github.com/jamesward/heroku-buildpack-markdown.git my-project-name\n</code></pre> <ol> <li> <p>Now your Heroku app is created, an extra remote repository is added to your local git project.  So now you can push the changes in your local repo to Heroku, deploying the website:</p> <pre><code>git push heroku master\n</code></pre> </li> <li> <p>Once deployed you can open your web site with the following heroku command (or just copy the address given at the end of the Heroku deploy message):</p> <pre><code>heroku open\n</code></pre> </li> <li> <p>Continue to develop your content and committing changes to your local repository.  When you want to publish your changes to heroku, simply do another push:</p> <pre><code>git add .\ngit commit -m \"useful commit message\"\ngit push heroku master\n</code></pre> </li> </ol> <p>Also consider creating a repository on Github should you wish to collaborate on the content with others, especially if you have more content contributors than those you wish to be able to deploy to heroku.</p>"},{"location":"git/to-review/git-basics/wip/","title":"Working with Staging","text":""},{"location":"git/to-review/git-basics/wip/#removing-changes-from-staging","title":"Removing changes from Staging","text":"<p>Sometimes you add things to staging that you change your minde about.  </p> <p>If a file is untracked by git (its never been part of a commit) then you can remove it from staging using the command</p> <p>git rm --cached filename</p> <p>If the file has been tracked by git, then the above command will cause the file to be removed from the repository should a further commit take place.</p> <p>Therefore, for tracked file that you want to unstage, you should use the command</p> <p>git reset HEAD filename</p>"},{"location":"git/to-review/git-basics/wip/#creating-branches","title":"creating branches","text":""},{"location":"git/to-review/git-basics/wip/#commiting","title":"commiting","text":""},{"location":"git/to-review/git-basics/wip/#merging","title":"merging","text":""},{"location":"git/to-review/git-basics/wip/#remote-branches","title":"remote branches","text":""},{"location":"git/to-review/git-basics/wip/#deleting-remote-branches","title":"deleting remote branches","text":""},{"location":"git/to-review/git-basics/wip/#deleting-local-branches","title":"deleting local branches","text":""},{"location":"git/to-review/git-basics/wip/#git-remote-purge","title":"git remote purge","text":""},{"location":"git/to-review/git-basics/wip/#working-with-tags","title":"Working with Tags","text":""},{"location":"git/to-review/git-basics/wip/#creating-tags","title":"creating Tags","text":""},{"location":"git/to-review/git-basics/wip/#git-push-tags","title":"git push --tags","text":""},{"location":"git/to-review/git-basics/wip/#commits","title":"Commits","text":""},{"location":"git/to-review/git-basics/wip/#discarding-a-local-commits","title":"discarding a local Commits","text":""},{"location":"git/to-review/git-basics/wip/#discarding-a-remote-commit-and-resetting-your-local-working-copy","title":"discarding a remote commit and resetting your local working copy","text":"<p>git reset --hard HEAD^ git checkout master</p>"},{"location":"git/to-review/git-basics/wip/#git-log-updating-details-about-remotes","title":"Git Log - Updating details about Remotes","text":"<p>(see git-live script)</p> <p>Use git fetch --all or git remote update to get details of all the changes from every remote repository attached to the local git repository you call the command from.</p>"},{"location":"git/to-review/git-basics/wip/#testing-branches","title":"Testing branches","text":"<p>Say you want to test out your branch you have been working on but your setup is only configured to work on master, then you can push a branch from one repository to the master (or any other branch) of another repository.</p> <p>For example, heroku only deploys from master.  You can use git to deploy your developing branch to your heroku-test application using the following notation:</p> <pre><code>git push repository local-branch:remote-branch\n\ngit push heroku-test developing:master\n</code></pre> <p>In this example we are pushing the local developing branch to the master branch of the heroku-test remote repository.  This allows you to use heroku-test application to run some web application tests (eg. selinum).  </p> <p>You dont need to merge your developing branch until after you are happy with oyour testing.</p>"},{"location":"git/to-review/git-basics/wip/#rebase-or-not-rebase-that-is-the-question","title":"Rebase or not rebase, that is the question","text":""},{"location":"git/to-review/git-basics/wip/#what-is-rebasing","title":"what is Rebasing","text":"<p>Rebasing is a way to do merging without including specific commits that would otherwise appear due to a merge.</p> <p>Some teams decide that having extra commits just for merges polutes the history of the project and makes it harder to understand.</p>"},{"location":"git/to-review/git-basics/wip/#why-would-you-do-it","title":"Why would you do it","text":"<p>If you are just starting with Git, then you probably dont want to do this yet.  Make sure you are comfortable with branching and merging before starting to rebase.</p> <p>Rebasing can work well with short lived branches where merges would otherwise happen very often, leading to a high ratio of merge commits.  For these shor lived branches, using rebase helps keep a clean history.</p> <p>If you want to keep a branch up to date from master and dont want to include lots of commits only there because of a merge, then rebase will tidily keep your branch up to date.  This makes sence if the branch is going to be around for a little while or there is active development on the master that you need to keep up with.</p> <p>For branches that have been around for days or weeks, its more likey that you will benefit from a merge.  With a merge you get the full history detail, so its easier to see where things come from if there is a problem merging.</p> <p>Use rebase with care as you are re-writing history and loosing some information about where changes have come from.  Make sure you dont need to know the information you are ommitting with rebase.  </p>"},{"location":"git/to-review/git-basics/wip/#interactive-rebasing","title":"Interactive Rebasing","text":""},{"location":"git/to-review/git-basics/wip/#merging-two-commits-together","title":"merging two commits together","text":"<p>If you have done two commits that should really be one, then you can use rebase interactive to join those commits (squash them in git terms).</p> <p>''''''</p>"},{"location":"git/to-review/git-basics/wip/#intractively-rebase-the-last-three-commits","title":"intractively rebase the last three commits","text":"<p>git rebase -i HEAD~2 ''''</p>"},{"location":"git/to-review/git-basics/wip/#an-editor-opens-up-and-lets-you-edit-the-commits-in-this-case-the-last-commit-will-be-merged-into-the-one-before-it","title":"an editor opens up and lets you edit the commits, in this case, the last commit will be merged into the one before it.","text":"<p>pick 4b65a5a Add tests pick f239187 Implement poodles squash c3f863f Add title to poodle page</p>"},{"location":"git/to-review/git-basics/wip/#git-attributes-file","title":"Git attributes file","text":"<p>Tell git how to manage particular file types</p> <p>For example:</p> <ul> <li>text=auto  .rb text .js text  .bat text eol=crlf  .sh text eol=lf</li> </ul> <p>*.png binary</p>"},{"location":"git/to-review/git-basics/wip/#submodules","title":"Submodules","text":""},{"location":"git/to-review/git-basics/wip/#avoid-double-pushing","title":"Avoid double pushing","text":"<p>As we have seen, when you make changes to a submodule, as well as pushing the changes in that submodule you also need to push the parent repository.  The parent has a reference to a SHA of what it knows as the latest commit for the submodule.  If the parent is pushed without the submodule, then the new commit refered to by the parent is not present in everyone elses repository.</p> <p>Manage this automatically using the --recurse-submodules option on-demand</p> <pre><code>git push --recurse-submodules=on-demand\n</code></pre> <p>Create an alias for this option so that you dont have to type it all (or remember it all if you pick a meaningful alias)</p> <pre><code>git config alias.pushall 'push --recurse-submodules=on-demand'\n</code></pre> <p>additional topics</p> <pre><code>Repositories\nCommits\nViewing changes\nAlias\nGoing forward to fix mistakes\nTags\nRemotes\nGithub\nBranching &amp; merging - when to do it\nStashing\nRebasing is evil !!!\nCherry picking\nPatches\nBisect\nRerere\nBlame\nCommon workflows\nContinuous Integration with Travis\n</code></pre>"},{"location":"git/to-review/git-tips/","title":"Git Tips","text":"<p>We will explore some of the more intermediate and advanced uses of Git in this workshop, to help you get the most of of Git.</p> <p>Each section is self contained, unless otherwise mentioned, so you can read these tips in any order.  In general though, the most common tips are in the first few sections.</p>"},{"location":"git/to-review/git-tips/branching-stragegies/","title":"Branching Stragegies","text":"<p>Previously we discussed what a branch is in Git, how they are created and how to switch between branches.  Now we will discuss different approaches to using branches, from the very simple to the complex.</p>"},{"location":"git/to-review/git-tips/branching-stragegies/#local-branches-only-strategy","title":"Local Branches only Strategy","text":"<p>Branches created locally.  Any changes to be shared are merged into the master branch first then that master branch is pushed to a common repository.</p>"},{"location":"git/to-review/git-tips/branching-stragegies/#advantages","title":"Advantages","text":"<ul> <li>Very simple to use.</li> <li>Only 1 branch to keep in sync with everyone else.</li> </ul>"},{"location":"git/to-review/git-tips/branching-stragegies/#limitations","title":"Limitations","text":""},{"location":"git/to-review/git-tips/branching-stragegies/#github-pull-model","title":"Github Pull Model","text":"<p>Branches created locally.  Any changes to be shared are merged into the master branch first then that master branch is pushed to a common repository.</p>"},{"location":"git/to-review/git-tips/branching-stragegies/#advantages_1","title":"Advantages","text":"<ul> <li>Quite simple to use.</li> <li>Can work with multiple shared branches</li> <li>Provides easy way to review, discuss and document changes</li> </ul>"},{"location":"git/to-review/git-tips/branching-stragegies/#limitations_1","title":"Limitations","text":"<ul> <li>Requires a services such as Github that supports pull requests</li> </ul>"},{"location":"git/to-review/git-tips/branching-stragegies/#git-flow","title":"Git Flow","text":"<p>...</p>"},{"location":"git/to-review/git-tips/branching-stragegies/#advantages_2","title":"Advantages","text":"<ul> <li>It makes you learn git really well </li> <li>It can help with larger teams</li> </ul>"},{"location":"git/to-review/git-tips/branching-stragegies/#limitations_2","title":"Limitations","text":"<ul> <li>It may be overkill</li> <li>Learning curve for adoption, not to be rushed into</li> <li>Need to ensure everyone understands the flow, human error easily introduced</li> <li>Relying on tools to manage the flow can mean problems harder to fix if something goes wrong, as people may not understand the flow enough.</li> </ul> <p>See the Git Flow section for more details.</p>"},{"location":"git/to-review/git-tips/common-pitfalls/","title":"Git Common Pitfalls","text":"<p>Here are some common pitfalls that people experience when using git and of course ways to dig yourself out of them.</p>"},{"location":"git/to-review/git-tips/common-pitfalls/#loosing-your-head","title":"Loosing your head","text":"<p>Confusing Git leads to your confusion</p>"},{"location":"git/to-review/git-tips/common-pitfalls/#staging-and-commiting-to-the-wrong-branch","title":"Staging and Commiting to the wrong branch","text":"<p>[Undo a commit to a local branch ]</p> <p>If using the command line for git, enhance your prompt to display the current branch you are on.</p> <p>Use Git status ....</p> <p>Learn how to use your git tool well, so that it visualises the current branch you are on or asks / checks you are pushing to the correct branch.</p>"},{"location":"git/to-review/git-tips/common-pitfalls/#pushing-to-the-wrong-repository","title":"Pushing to the wrong repository","text":"<p>Warn everyone immediately, the longer you wait the more pain people will feel. </p> <p>Best approach is to create a new commit that resolved the problem you just created.</p>"},{"location":"git/to-review/git-tips/common-pitfalls/#staging-the-wrong-files","title":"Staging the wrong files","text":"<p>Learn to use git diff well to see the changes before you add them.</p> <p>Use git status to see which files have been modified and which ones you have addded.</p> <p>[Undo staging a file, when tracked and untracked]</p>"},{"location":"git/to-review/git-tips/common-pitfalls/#staging-unwanted-changes-in-a-file","title":"Staging unwanted changes in a file","text":"<ul> <li>eg whitespace, formatting changes </li> </ul> <p>Use <code>git add -p filename</code> to select only the lines (hunks) you want to stage.</p> <p>Use <code>git checkout filename</code> to reset the file to be the same as that committed in Git, wiping out any unwanted changes (perhaps made by mistake or by your code writing tools).</p>"},{"location":"git/to-review/git-tips/creating-a-branch/","title":"Managing Changes with Branches","text":""},{"location":"git/to-review/git-tips/creating-a-branch/#why-branch","title":"Why Branch","text":"<ul> <li>an easy way to experiment with code, as a branch can easily be discarded</li> <li>Branches help you merge specific commits into another branch </li> <li>Allows you to keep all your code in commits all the time.</li> <li>Branching is quick and relatively simple</li> </ul>"},{"location":"git/to-review/git-tips/creating-a-branch/#how-to-branch","title":"How to Branch","text":"<ul> <li>should already be covered in the Git Basics Workshop</li> </ul>"},{"location":"git/to-review/git-tips/creating-a-branch/#erm","title":"Erm","text":""},{"location":"git/to-review/git-tips/git-flow/","title":"Git Flow","text":"<p>An altogether more complex workflow for masochists...</p>"},{"location":"git/to-review/git-tips/github-workflow/","title":"Github Workflow - using Pull Requests","text":"<p>[TODO] explain how Github uses the pull request process to support development over distributed teams.</p>"},{"location":"git/to-review/git-tips/merging-changes/","title":"Merging Changes","text":""},{"location":"git/to-review/git-tips/merging-changes/#pulling-from-shared-repositories","title":"Pulling from shared repositories","text":"<p>Github etc.</p>"},{"location":"git/to-review/git-tips/merging-changes/#merging-local-branches","title":"Merging local branches","text":""},{"location":"git/to-review/git-tips/merging-changes/#merging-specific-commits-cherrypicking","title":"Merging specific commits - cherrypicking","text":""},{"location":"git/to-review/git-tips/understanding-hunks/","title":"Understanding Hunks in Git","text":"<p>A hunk in Git terms is a line or several consecutive lines of a file that have changed since the last commit.</p> <p>Git identifies hunks in the files you change and when you use interactive staging you can be more selective about the hunks you add to the next commit.</p> <pre><code>git add -p\n</code></pre> <p>[Examples of hunks]</p>"},{"location":"git/to-review/git-tips/understanding-hunks/#splitting-hunks","title":"Splitting Hunks","text":"<p>[TODO] how does git decide where to split Hunks ?</p>"},{"location":"introduction/ci-workflow/","title":"Continuous Integration Workflow","text":"<p>Git workflows page</p> <p></p>"},{"location":"introduction/contributing/","title":"Contributing to Practicalli","text":"<p>Practicalli books are written in markdown and use MkDocs to generate the published website via a GitHub workflow.  MkDocs can also run a local server using the <code>make docs</code> target from the <code>Makefile</code></p> <p>By submitting content ideas and corrections you are agreeing they can be used in this book under the Creative Commons Attribution ShareAlike 4.0 International license.  Attribution will be detailed via GitHub contributors.</p> <p>All content and interaction with any persons or systems must be done so with respect and within the Practicalli Code of Conduct.</p>"},{"location":"introduction/contributing/#book-status","title":"Book status","text":""},{"location":"introduction/contributing/#submit-and-issue-or-idea","title":"Submit and issue or idea","text":"<p>If something doesnt seem quite right or something is missing from the book, please raise an issue via the GitHub repository explaining in as much detail as you can.</p> <p>Raising an issue before creating a pull request will save you and the maintainer time.</p>"},{"location":"introduction/contributing/#considering-a-pull-request","title":"Considering a Pull request?","text":"<p>Before investing any time in a pull request, please raise an issue explaining the situation.  This can save you and the maintainer time and avoid rejected pull requests.</p> <p>Please keep pull requests small and focused, as they are much quicker to review and easier to accept.  Ideally PR's should be for a specific page or at most a section.</p> <p>A PR with a list of changes across different sections will not be merged, it will be reviewed eventually though.</p>"},{"location":"introduction/contributing/#thank-you-to-everyone-that-has-contributed","title":"Thank you to everyone that has contributed","text":"<p>A huge thank you to Rich Hickey and the team at Cognitect for creating and continually guiding the Clojure language.  Special thank you to Alex Miller who has provided excellent advice on working with Clojure and the CLI tooling.</p> <p>The Clojure community has been highly supportive of everyone using Clojure and I'd like to thank everyone for the feedback and contributions.  I would also like to thank everyone that has joined in with the London Clojurins community, ClojureBridgeLondon, Clojurians Slack community, Clojurians Zulip community and Clojureverse community.</p> <p>Thank you to everyone who sponsors the Practicalli websites and videos and for the Clojurists Together sponsorship, it helps me continue the work at a much faster pace.</p> <p>Special thanks to Bruce Durling for getting me into Cloure in the first place.</p> <p></p>"},{"location":"introduction/gitops/","title":"GitOps Overview","text":"<p>This is a placeholder for the GitOps Overview page</p> <p>TODO:rewrite blurb from GitLab to something Practicalli</p> <p>https://about.gitlab.com/topics/gitops/</p> <p>GitOps is an operational framework that takes DevOps best practices used for application development such as version control, collaboration, compliance, and CI/CD tooling, and applies them to infrastructure automation. While the software development lifecycle has been automated, infrastructure has remained a largely manual process that requires specialized teams. With the demands made on today\u2019s infrastructure, it has become increasingly crucial to implement infrastructure automation. Modern infrastructure needs to be elastic so that it can effectively manage cloud resources that are needed for continuous deployments.</p> <p>Modern applications are developed with speed and scale in mind. Organizations with a mature DevOps culture can deploy code to production hundreds of times per day. DevOps teams can accomplish this through development best practices such as version control, code review, and CI/CD pipelines that automate testing and deployments.</p> <p>GitOps is used to automate the process of provisioning infrastructure. Similar to how teams use application source code, operations teams that adopt GitOps use configuration files stored as code (infrastructure as code). GitOps configuration files generate the same infrastructure environment every time it\u2019s deployed, just as application source code generates the same application binaries every time it\u2019s built.</p>"},{"location":"introduction/gitops/#how-do-teams-put-gitops-into-practice","title":"How do teams put GitOps into practice?","text":"<p>GitOps is not a single product, plugin, or platform. GitOps workflows help teams manage IT infrastructure through processes they already use in application development.</p> <p>GitOps requires three core components:</p> <pre><code>GitOps = IaC + MRs + CI/CD\n</code></pre> <p>IaC: GitOps uses a Git repository as the single source of truth for infrastructure definitions. Git is an open source version control system that tracks code management changes, and a Git repository is a .git folder in a project that tracks all changes made to files in a project over time. Infrastructure as code (IaC) is the practice of keeping all infrastructure configuration stored as code. The actual desired state may or may not be not stored as code (e.g., number of replicas or pods).</p> <p>MRs: GitOps uses merge requests (MRs) as the change mechanism for all infrastructure updates. The MR is where teams can collaborate via reviews and comments and where formal approvals take place. A merge commits to your main (or trunk) branch and serves as an audit log.</p> <p>CI/CD: GitOps automates infrastructure updates using a Git workflow with continuous integration (CI) and continuous delivery (CI/CD). When new code is merged, the CI/CD pipeline enacts the change in the environment. Any configuration drift, such as manual changes or errors, is overwritten by GitOps automation so the environment converges on the desired state defined in Git. GitLab uses CI/CD pipelines to manage and implement GitOps automation, but other forms of automation, such as definitions operators, can be used as well.</p> <p> </p>"},{"location":"introduction/gitops/#gitops-challenges","title":"GitOps challenges","text":"<p>With any collaborative effort, change can be tricky and GitOps is no exception. GitOps is a process change that will require discipline from all participants and a commitment to doing things in a new way. It is vital for teams to write everything down.</p> <p>GitOps allows for greater collaboration, but that is not necessarily something that comes naturally for some individuals or organizations. A GitOps approval process means that developers make changes to the code, create a merge request, an approver merges these changes, and the change is deployed. This sequence introduces a \u201cchange by committee\u201d element to infrastructure, which can seem tedious and time-consuming to engineers used to making quick, manual changes.</p> <p>It is important for everyone on the team to record what\u2019s going on in merge requests and issues. The temptation to edit something directly in production or change something manually is going to be difficult to suppress, but the less \u201ccowboy engineering\u201d there is, the better GitOps will work.</p>"},{"location":"introduction/gitops/#what-makes-gitops-work","title":"What makes GitOps work?","text":"<p>As with any emerging technology term, GitOps isn\u2019t strictly defined the same way by everyone across the industry. GitOps principles can be applied to all types of infrastructure automation including VMs and containers, and can be very effective for teams looking to manage Kubernetes-based infrastructure.</p> <p>While many tools and methodologies promise faster deployment and seamless management between code and infrastructure, GitOps differs by focusing on a developer-centric experience. Infrastructure management through GitOps happens in the same version control system as the application development, enabling teams to collaborate more in a central location while benefiting from Git\u2019s built-in features.</p>"},{"location":"introduction/repl-workflow/","title":"REPL Driven Development","text":"<p>Always be REPL'ing</p> <p>Coding without a REPL feels limiting. The REPL provides fast feedback from code as its crafted, testing assumptions and design choices every step of the journey to a solution  - John Stevenson, Practical.li</p> <p>Clojure is a powerful, fun and highly productive language for developing applications and services.  The clear language design is supported by a powerful development environment known as the REPL (read, evaluate, print, loop).  The REPL gives you instant feedback on what your code does and enables you to test either a single expression or run the whole application (including tests).</p> <p>REPL driven development is the foundation of working with Clojure effectively</p> <p>An effective Clojure workflow begins by running a REPL process.  Clojure expressions are written and evaluated immediately to provide instant feedback. The REPL feedback helps test the assumptions that are driving the design choices.</p> <ul> <li>Read - code is read by the Clojure reader, passing any macros to the macro reader which converts those macros into Clojure code.</li> <li>Evaluate - code is compiled into the host language (e.g. Java bytecode) and executed</li> <li>Print - results of the code are displayed, either in the REPL or as part of the application.</li> <li>Loop - the REPL is a continuous process that evaluates code, either a single expression or the whole application.</li> </ul> <p>Design decisions and valuable data from REPL experiments can be codified as specifications and unit tests</p> <p>Practicalli REPL Reloaded Workflow</p> <p>The principles of REPL driven development are implemented in practice using the Practicalli REPL Reloaded Workflow and supporting tooling.  This workflow uses Portal to inspect all evaluation results and log events, hot-load libraries into the running REPL process and reloads namespaces to support major refactor changes.</p>"},{"location":"introduction/repl-workflow/#evaluating-source-code","title":"Evaluating source code","text":"<p>A REPL connected editor is the primary tool for evaluating Clojure code from source code files, displaying the results inline.</p> <p>Source code is automatically evaluated in its respective namespace, removing the need to change namespaces in the REPL with (<code>in-ns</code>) or use fully qualified names to call functions.</p> <p> </p> Evaluate Clojure in a Terminal UI REPL <p>Entering expressions at the REPL prompt evaluates the expression immediately, returning the result directly underneath  </p>"},{"location":"introduction/repl-workflow/#rich-comment-blocks-living-documentation","title":"Rich Comment blocks - living documentation","text":"<p>The <code>(comment ,,,)</code> function wraps code that is only run directly by the developer using a Clojure aware editor.</p> <p>Expressions in rich comment blocks can represent how to use the functions that make up the namespace API.  For example, starting/restarting the system, updating the database, etc.  Expressions provide examples of calling functions with typical arguments and make a project more accessible and easier to work with.</p> <p>Clojure Rich Comment to manage a service</p> <pre><code>(ns practicalli.gameboard.service)\n\n(defn app-server-start [port] ,,,)\n(defn app-server-start [] ,,,)\n(defn app-server-restart [] ,,,)\n\n(defn -main\n  \"Start the service using system components\"\n  [&amp; options] ,,,)\n\n(comment\n  (-main)\n  (app-server-start 8888)\n  (app-server-stop)\n  (app-server-restart 8888)\n\n  (System/getenv \"PORT\")\n  (def environment (System/getenv))\n  (def system-properties (System/getProperties))\n  ) ; End of rich comment block\n</code></pre> <p>Rich comment blocks are very useful for rapidly iterating over different design decisions by including the same function but with different implementations.  Hide clj-kondo linter warnings for redefined vars (<code>def</code>, <code>defn</code>) when using this approach.</p> <pre><code>;; Rich comment block with redefined vars ignored\n#_{:clj-kondo/ignore [:redefined-var]}\n(comment\n  (defn value-added-tax []\n    ;; algorithm design - first idea)\n\n  (defn value-added-tax []\n    ;; algorithm design - second idea)\n\n  ) ;; End of rich comment block\n</code></pre> <p>The \"Rich\" in the name is an honourary mention to Rich Hickey, the author and benevolent dictator of Clojure design.</p>"},{"location":"introduction/repl-workflow/#design-journal","title":"Design Journal","text":"<p>A journal of design decisions makes the code easier to understand and maintain.  Code examples of design decisions and alternative design discussions are captured, reducing the time spent revisiting those discussions.</p> <p>Journals simplify the developer on-boarding processes as the journey through design decisions are already documented.</p> <p>A Design Journal is usually created in a separate namespace, although it may start as a rich comment at the bottom of a namespace.</p> <p>A journal should cover the following aspects</p> <ul> <li>Relevant expressions use to test assumptions about design options.</li> <li>Examples of design choices not taken and discussions why (saves repeating the same design discussions)</li> <li>Expressions that can be evaluated to explain how a function or parts of a function work</li> </ul> <p>The design journal can be used to create meaningful documentation for the project very easily and should prevent time spent on repeating the same conversations.</p> <p>Example design journal</p> <p>Design journal for TicTacToe game using Reagent, ClojureScript and Scalable Vector Graphics</p>"},{"location":"introduction/repl-workflow/#viewing-data-structures","title":"Viewing data structures","text":"<p>Pretty print shows the structure of results from function calls in a human-friendly form, making it easier for a developer to parse and more likely to notice incorrect results.</p> <p>Tools to view and navigate code</p> <ul> <li> Cider inspector is an effective way to navigate nested data and page through large data sets.</li> <li> Portal Inspector to visualise many kinds of data in many different forms.</li> </ul> <p></p>"},{"location":"introduction/repl-workflow/#code-style-and-idiomatic-clojure","title":"Code Style and idiomatic Clojure","text":"<p>Clojure aware editors should automatically apply formatting that follows the  Clojure Style guide.</p> <p>Live linting with clj-kondo suggests common idioms and highlights a wide range of syntax errors as code is written, minimizing bugs and therefore speeding up the development process.</p> <p> </p> <p>Clojure LSP is build on top of clj-kondo</p> <p> Clojure LSP uses clj-kondo static analysis to provide a standard set of development tools (format, refactor, auto-complete, syntax highlighting, syntax &amp; idiom warnings, code navigation, etc).</p> <p>Clojure LSP can be used with any Clojure aware editor that provides an LSP client, e.g.  Spacemacs,  Doom Emacs,  Neovim, VSCode.</p> <p>Clojure Style Guide</p> <p>The  Clojure Style guide provides examples of common formatting approaches, although the development team should decide which of these to adopt.  Emacs <code>clojure-mode</code> will automatically format code and so will Clojure LSP (via cljfmt).  These tools are configurable and should be tailored to the teams standard.</p>"},{"location":"introduction/repl-workflow/#data-and-function-specifications","title":"Data and Function specifications","text":"<p> Clojure spec is used to define a contract on incoming and outgoing data, to ensure it is of the correct form.</p> <p>As data structures are identified in REPL experiments, create data specification to validate the keys and value types of that data.</p> <pre><code>;; ---------------------------------------------------\n;; Address specifications\n(spec/def ::house-number string?)\n(spec/def ::street string?)\n(spec/def ::postal-code string?)\n(spec/def ::city string?)\n(spec/def ::country string?)\n(spec/def ::additional string?)\n\n(spec/def ::address   ; Composite data specification\n  (spec/keys\n   :req-un [::street ::postal-code ::city ::country]\n   :opt-un [::house-number ::additional]))\n;; ---------------------------------------------------\n</code></pre> <p>As the public API is designed, specifications for each functions arguments are added to validate the correct data is used when calling those functions.</p> <p> Generative testing provides a far greater scope of test values used incorporated into unit tests. Data uses clojure.spec to randomly generate data for testing on each test run.</p>"},{"location":"introduction/repl-workflow/#test-driven-development-and-repl-driven-development","title":"Test Driven Development and REPL Driven Development","text":"<p>Test Driven Development (TDD) and REPL Driven Development (RDD) complement each other as they both encourage incremental changes and continuous feedback.</p> <p>Test Driven Development fits well with Hammock Time, as good design comes from deep thought</p> <ul> <li>RDD enables rapid design experiments so different approaches can easily and quickly be evaluated .</li> <li>TDD focuses the results of the REPL experiments into design decisions, codified as unit tests.  These tests guide the correctness of specific implementations and provide critical feedback when changes break that design.</li> </ul> <p> Unit tests should support the public API of each namespace in a project to help prevent regressions in the code.  Its far more efficient in terms of thinking time to define unit tests as the design starts to stabilize than as an after thought.</p> <p><code>clojure.test</code> library is part of the Clojure standard library that provides a simple way to start writing unit tests.</p> <p> Clojure spec can also be used for generative testing, providing far greater scope in values used when running unit tests.  Specifications can be defined for values and functions.</p> <p>Clojure has a number of  test runners available.  Kaocha is a test runner that will run unit tests and function specification checks.</p> <p>Automate local test runner</p> <p>Use  kaocha test runner in watch mode to run tests and specification check automatically (when changes are saved) <pre><code>clojure -X:test/watch\n</code></pre></p>"},{"location":"introduction/repl-workflow/#continuous-integration-and-deployment","title":"Continuous Integration and Deployment","text":"<p>Add a  continuous integration service to run tests and builds code on every shared commit.  Spin up testable review deployments when commits pushed to a pull request branch, before pushing commits to the main deployment branch, creating an effective pipeline to gain further feedback.</p> <ul> <li> CircleCI provides a simple to use service that supports Clojure projects.</li> <li> GitHub Workflows and GitHub actions marketplace to quickly build a tailored continuous integration service, e.g. Setup Clojure GitHub Action.</li> <li> GitLab CI</li> </ul> <p></p>"},{"location":"introduction/repl-workflow/#live-coding-with-data-stuart-halloway","title":"Live Coding with Data - Stuart Halloway","text":"<p>There are few novel features of programming languages, but each combination has different properties. The combination of dynamic, hosted, functional and extended Lisp in Clojure gives developers the tools for making effective programs. The ways in which Clojure's unique combination of features can yield a highly effective development process.</p> <p>Over more than a decade we have developed an effective approach to writing code in Clojure whose power comes from composing many of its key features. As different as Clojure programs are from e.g. Java programs, so to can and should be the development experience. You are not in Kansas anymore!</p> <p>This talk presents a demonstration of the leverage you can get when writing programs in Clojure, with examples, based on my experiences as a core developer of Clojure and Datomic.</p> <p> </p>"},{"location":"introduction/writing-tips/","title":"Writing tips for MkDocs","text":"<p>Making the docs more engaging using the mkdocs-material theme reference guide</p> Configuring Colors <p>Material for MkDocs - Changing the colors lists the primary and accent colors available.</p> <p>HSL Color Picker for codes to modify the theme style, overriding colors in <code>docs/assets/stylesheets/extra.css</code></p>"},{"location":"introduction/writing-tips/#hypertext-links","title":"Hypertext links","text":"<p>Links open in the same browser window/tab by default.</p> <p>Add <code>{target=_blank}</code> to the end of a link to configure opening in a new tab</p> <pre><code>[link text](url){target=_blank}\n</code></pre>"},{"location":"introduction/writing-tips/#buttons","title":"Buttons","text":"<p>Convert any link into a button by adding <code>{.md-button}</code> class names to end of the markdown for a link, which uses <code>.md-button-primary</code> by default.  Include <code>target=_blank</code> for buttons with links to external sites.</p> <pre><code>[link text](http://practical.li/blog){.md-button target=_blank}\n</code></pre> <p>Or specify a different class</p> <pre><code>[link text](http://practical.li/blog){.md-button .md-button-primary}\n</code></pre> <p>Add an icon to the button</p> <p> Practicalli Issues  Practicalli Blog</p> <pre><code>[:fontawesome-brands-github: Practicalli Issues](http://practical.li/blog){ .md-button .md-button-primary }\n[:octicons-heart-fill-24: Practicalli Blog](http://practical.li/blog){ .md-button .md-button-primary }\n</code></pre> <p>Search all supported icons</p>"},{"location":"introduction/writing-tips/#youtube-video","title":"YouTube video","text":"<p>Use an iframe element to include a YouTube video, wrapping in a paragraph tag with center alignment to place the video in a centered horizontal position</p> <pre><code>&lt;p style=\"text-align:center\"&gt;\n&lt;iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/rQ802kSaip4\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;\n&lt;/p&gt;\n</code></pre> <p>mkdocs material does not have direct support for adding a YouTube video via markdown.</p>"},{"location":"introduction/writing-tips/#admonitions","title":"Admonitions","text":"<p>Supported admonition types</p> <p>Note</p> <p>Use <code>!!!</code> followed by <code>NOTE</code></p> <p>Adding a title</p> <p>Use <code>!!!</code> followed by <code>NOTE</code> and a <code>\"title in double quotes\"</code></p> <p>Shh, no title bar just the text... Use <code>!!!</code> followed by <code>NOTE</code> and a <code>\"\"</code> empty double quotes</p> <p>Abstract</p> <p>Use <code>!!!</code> followed by <code>ABSTRACT</code></p> <p>Info</p> <p>Use <code>!!!</code> followed by <code>INFO</code></p> <p>Tip</p> <p>Use <code>!!!</code> followed by <code>TIP</code></p> <p>Success</p> <p>Use <code>!!!</code> followed by <code>SUCCESS</code></p> <p>Question</p> <p>Use <code>!!!</code> followed by <code>QUESTION</code></p> <p>Warning</p> <p>Use <code>!!!</code> followed by <code>WARNING</code></p> <p>Failure</p> <p>Use <code>!!!</code> followed by <code>FAILURE</code></p> <p>Danger</p> <p>Use <code>!!!</code> followed by <code>DANGER</code></p> <p>Bug</p> <p>Use <code>!!!</code> followed by <code>BUG</code></p> <p>Example</p> <p>Use <code>!!!</code> followed by <code>EXAMPLE</code></p> <p>Quote</p> <p>Use <code>!!!</code> followed by <code>QUOTE</code></p>"},{"location":"introduction/writing-tips/#collapsing-admonitions","title":"Collapsing admonitions","text":"Note <p>Collapse those admonitions using <code>???</code> instead of <code>!!!</code></p> Replace with a title <p>Use <code>???</code> followed by <code>NOTE</code> and a <code>\"title in double quotes\"</code></p> Expanded by default <p>Use <code>???+</code>, note the <code>+</code> character,  followed by <code>NOTE</code> and a <code>\"title in double quotes\"</code></p>"},{"location":"introduction/writing-tips/#inline-blocks","title":"Inline blocks","text":"<p>Inline blocks of text to make a very specific callout within text</p> <p>Info</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Adding something to then end of text is probably my favourite</p> <p>Info</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>"},{"location":"introduction/writing-tips/#code-blocks","title":"Code blocks","text":"<p>Code blocks include a copy icon automatically</p> <p>Syntax highlighting in code blocks</p> <pre><code>(defn my-function  ; Write a simple function\n  \"With a lovely doc-string\"\n  [arguments]\n  (map inc [1 2 3]))\n</code></pre> <p>Give the code block a title using <code>title=\"\"</code> after the backtics and language name</p> src/practicalli/gameboard.clj<pre><code>(defn my-function\n  \"With a lovely doc-string\"\n  [arguments]\n  (map inc [1 2 3]))\n</code></pre> <p>We all like line numbers, especially when you can set the starting line</p> src/practicalli/gameboard.clj<pre><code>(defn my-function\n  \"With a lovely doc-string\"\n  [arguments]\n  (map inc [1 2 3]))\n</code></pre> <p>Add <code>linenums=42</code> to start line numbers from 42 onward</p> <pre><code>clojure linenums=\"42\" title=\"src/practicalli/gameboard.clj\"\n</code></pre>"},{"location":"introduction/writing-tips/#annotations","title":"Annotations","text":"<p>Annotations in a code block help to highlight important aspects.  Use the comment character for the language followed by a space and a number in brackets</p> <p>For example, in a shell code block, use <code># (1)</code> where 1 is the number of the annotation</p> <p>Use a number after the code block to add the text for the annotation, e.g. <code>1.</code>. Ensure there is a space between the code block and the annotation text.</p> <pre><code>ls -la $HOME/Downloads  # (1)\n</code></pre> <ol> <li> I'm a code annotation! I can contain <code>code</code>, formatted text, images, ... basically anything that can be written in Markdown.</li> </ol> <p>Code blocks with annotation, add <code>!</code> after the annotation number to suppress the <code>#</code> character</p> <pre><code>(defn helper-function\n  \"Doc-string with description of function purpose\" ; (1)!\n  [data]\n  (merge {:fish 1} data)\n  )\n</code></pre> <ol> <li>Always include a doc-string in every function to describe the purpose of that function, identifying why it was added and what its value is.</li> </ol> <p>GitHub action example with multiple annotations</p> <pre><code>name: ci # (1)!\non:\n  push:\n    branches:\n      - master # (2)!\n      - main\npermissions:\n  contents: write\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-python@v4\n        with:\n          python-version: 3.x\n      - run: pip install mkdocs-material # (3)!\n      - run: mkdocs gh-deploy --force\n</code></pre> <ol> <li> <p>You can change the name to your liking.</p> </li> <li> <p>At some point, GitHub renamed <code>master</code> to <code>main</code>. If your default branch     is named <code>master</code>, you can safely remove <code>main</code>, vice versa.</p> </li> <li> <p>This is the place to install further [MkDocs plugins] or Markdown     extensions with <code>pip</code> to be used during the build:</p> <pre><code>pip install \\\n  mkdocs-material \\\n  mkdocs-awesome-pages-plugin \\\n  ...\n</code></pre> </li> </ol>"},{"location":"introduction/writing-tips/#highlight-lines-in-code-blocks","title":"Highlight lines in code blocks","text":"<p>Add highlight line meta data to a code block after the opening backticks and code block language.</p> <p><code>hl_lines=\"2\"</code> highlights line 2 in the codeblock</p> <pre><code>(defn my-function\n  \"With a lovely doc-string\"\n  [arguments]\n  (map\n   inc\n   [1 2 3]))\n</code></pre>"},{"location":"introduction/writing-tips/#embed-external-files","title":"Embed external files","text":"<p><code>--8&lt;--</code> in a code block inserts code from a source code file or other text file</p> <p>Specify a local file from the root of the book project (the directory containing mkdocs.yml)</p> Scheduled Version Check GitHub Workflow from source code file scheduled version check<pre><code>\n</code></pre> Practicalli Project Templates Emacs project configuration - .dir-locals.el<pre><code>((clojure-mode . ((cider-preferred-build-tool . clojure-cli)\n                  (cider-clojure-cli-aliases . \":test/env:dev/reloaded\"))))\n</code></pre> <p>Code example reuse</p> <p>Use an embedded local or external file (URL) when the same content is required in more than one place in the book.</p> <p>An effective way of sharing code and configuration mutliple times in a book or across multiple books.</p>"},{"location":"introduction/writing-tips/#content-tabs","title":"Content tabs","text":"<p>Create in page tabs that can also be</p> <p>Setting up a project</p> Clojure CLILeiningen <pre><code>clojure -T:project/new :template app :name practicalli/gameboard\n</code></pre> <pre><code>lein new app practicalli/gameboard\n</code></pre> <p>Or nest the content tabs in an admonition</p> <p>Run a terminal REPL</p> Clojure CLILeiningen <pre><code>clojure -T:repl/rebel\n</code></pre> <pre><code>lein repl\n</code></pre>"},{"location":"introduction/writing-tips/#diagrams","title":"Diagrams","text":"<p>Neat flow diagrams</p> <p>Diagrams - Material for MkDocs</p> <pre><code>graph LR\n  A[Start] --&gt; B{Error?};\n  B --&gt;|Yes| C[Hmm...];\n  C --&gt; D[Debug];\n  D --&gt; B;\n  B ----&gt;|No| E[Yay!];</code></pre> <p>UML Sequence Diagrams</p> <pre><code>sequenceDiagram\n  Alice-&gt;&gt;John: Hello John, how are you?\n  loop Healthcheck\n      John-&gt;&gt;John: Fight against hypochondria\n  end\n  Note right of John: Rational thoughts!\n  John--&gt;&gt;Alice: Great!\n  John-&gt;&gt;Bob: How about you?\n  Bob--&gt;&gt;John: Jolly good!</code></pre> <p>state transition diagrams</p> <pre><code>stateDiagram-v2\n  state fork_state &lt;&lt;fork&gt;&gt;\n    [*] --&gt; fork_state\n    fork_state --&gt; State2\n    fork_state --&gt; State3\n\n    state join_state &lt;&lt;join&gt;&gt;\n    State2 --&gt; join_state\n    State3 --&gt; join_state\n    join_state --&gt; State4\n    State4 --&gt; [*]</code></pre> <p>Class diagrams - not needed for Clojure</p> <p>Entity relationship diagrams are handy though</p> <pre><code>erDiagram\n  CUSTOMER ||--o{ ORDER : places\n  ORDER ||--|{ LINE-ITEM : contains\n  LINE-ITEM {\n    customer-name string\n    unit-price int\n  }\n  CUSTOMER }|..|{ DELIVERY-ADDRESS : uses</code></pre>"},{"location":"introduction/writing-tips/#keyboard-keys","title":"Keyboard keys","text":"<p>Represent key bindings with Keyboard keys. Each number and alphabet character has their own key.</p> <ul> <li>1 <code>++1++</code> for numbers</li> <li>l <code>++\"l\"++</code> for lowercase character</li> <li>U <code>++u++</code> for uppercase character or <code>++\"U\"++</code> for consistency</li> </ul> <p>Punctionation keys use their name</p> <ul> <li>Space <code>++spc++</code></li> <li>, <code>++comma++</code></li> <li>Left <code>++arrow-left++</code></li> </ul> <p>For key sequences, place a space between each keyboard character</p> <ul> <li>Space g s <code>++spc++ ++\"g\"++ ++\"s\"++</code></li> </ul> <p>For key combinations, use join they key identifies with a <code>+</code></p> <ul> <li>Meta+X <code>++meta+x++</code></li> <li>Ctrl+Alt+Del <code>++ctrl+alt+del++</code></li> </ul> <p>MkDocs keyboard keys reference</p>"},{"location":"introduction/writing-tips/#images","title":"Images","text":"<p>Markdown images can be appended with material tags to set the size of the image, whether to appear on light or dark theme and support lazy image loading in browsers</p> SizeLazy LoadingAlignTheme SpecificAll Image Attributes <p><code>{style=\"height:150px;width:150px\"}</code> specifies the image size <pre><code>![Kitty Logo](https://raw.githubusercontent.com/practicalli/graphic-design/live/icons/kitty-light.png#only-dark){style=\"height:150px;width:150px\"}\n</code></pre></p> <p></p> <p><code>{loading=lazy}</code> specifies an image should lazily load in the browser <pre><code>![Kitty Logo](https://raw.githubusercontent.com/practicalli/graphic-design/live/icons/kitty-light.png){loading=lazy}\n</code></pre></p> <p><code>{aligh=left}</code> or <code>{aligh=right}</code> specifies the page alignment of an image. <pre><code>![Kitty Logo](https://raw.githubusercontent.com/practicalli/graphic-design/live/icons/kitty-light.png#only-dark){align=right}\n![Kitty Logo](https://raw.githubusercontent.com/practicalli/graphic-design/live/icons/kitty-dark.png#only-light){align=right}\n</code></pre></p> <p>  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p><code>![Kitty Logo](image/kitty-light.png#only-dark)</code> or <code>![Kitty Logo](image/kitty-light.png#only-light)</code>  specifies the theme the image should be shown, allowing different versions of images to be shown based on the theme. <pre><code>![Kitty Logo](https://raw.githubusercontent.com/practicalli/graphic-design/live/icons/kitty-light.png#only-dark){style=\"height:150px;width:150px\"}\n![Kitty Logo](https://raw.githubusercontent.com/practicalli/graphic-design/live/icons/kitty-dark.png#only-light){style=\"height:150px;width:150px\"}\n</code></pre> Use the theme toggle in the top nav bar to see the icon change between light and dark.  </p> <p>Requires the color pallet toggle</p> <p>Alight right, lazy load and set image to 150x150</p> <pre><code>![Kitty Logo](https://raw.githubusercontent.com/practicalli/graphic-design/live/icons/kitty-light.png#only-dark){align=right loading=lazy style=\"height:64px;width:64px\"}\n![Kitty Logo](https://raw.githubusercontent.com/practicalli/graphic-design/live/icons/kitty-dark.png#only-light){align=right loading=lazy style=\"height:64px;width:64px\"}\n</code></pre> <p>  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>"},{"location":"introduction/writing-tips/#lists","title":"Lists","text":"<p>Task lists</p> <ul> <li> Lorem ipsum dolor sit amet, consectetur adipiscing elit</li> <li> Vestibulum convallis sit amet nisi a tincidunt<ul> <li> In hac habitasse platea dictumst</li> <li> In scelerisque nibh non dolor mollis congue sed et metus</li> <li> Praesent sed risus massa</li> </ul> </li> <li> Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque</li> </ul> <p>Task List example</p> <pre><code>- [x] Lorem ipsum dolor sit amet, consectetur adipiscing elit\n- [ ] Vestibulum convallis sit amet nisi a tincidunt\n    * [x] In hac habitasse platea dictumst\n    * [x] In scelerisque nibh non dolor mollis congue sed et metus\n    * [ ] Praesent sed risus massa\n- [ ] Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque\n</code></pre>"},{"location":"introduction/writing-tips/#tooltips","title":"Tooltips","text":"<p>The humble tool tip</p> <p>Hover me</p> <p>with references</p> <p>Hover me</p> <p>Icon tool tip with a title</p> <p></p>"},{"location":"introduction/writing-tips/#abreviations","title":"Abreviations","text":"<p>The HTML specification is maintained by the W3C.</p> <p>[HTML]: Hyper Text Markup Language [W3C]: World Wide Web Consortium</p>"},{"location":"introduction/writing-tips/#magic-links","title":"Magic links","text":"<p>MagicLink can auto-link HTML, FTP, and email links. It can auto-convert repository links (GitHub, GitLab, and Bitbucket) and display them in a more concise, shorthand format.</p> <p>Email Practicalli</p> <p>Practicalli Neovim</p>"},{"location":"reference/","title":"Reference","text":"<p>Reference information for the Practicalli GitOps book.</p>"},{"location":"reference/git/","title":"Reference: Git","text":""},{"location":"reference/git/clone/","title":"Reference: Git Clone","text":"<p>clone a repository from another location, typically a shared Git service (GitHub, GitLab, etc.)</p> <pre><code>git clone --origin practicalli repository-url local-directory\n</code></pre> <p><code>--branch</code> option will checkout a specific branch name once cloned.</p> <p>Clone - Git reference</p>"},{"location":"reference/git/clone/#managing-clone-size","title":"Managing Clone size","text":"<p>Continuous Integration workflows can be more effective when cloning a small part of the repository.</p>"},{"location":"reference/git/clone/#partial-clone","title":"Partial Clone","text":"<p><code>--filter option</code> is used to clone a partial repository.</p> <p><code>git rev-list --filter=&lt;filter&gt; --all</code> shows objects in your repository that match the filter. </p> Blobless clone<pre><code>git clone --filter=blob:none &lt;url&gt;\n</code></pre> <p>Blobless clone downloads all reachable commits and trees, fetching blobs on-demand. </p> <p>Use case: developers and build environments that span multiple builds.</p> <p>Treeless clone<pre><code>git clone --filter=tree:0 &lt;url&gt;\n</code></pre> treeless clone download all reachable commits, fetching trees and blobs on-demand. </p> <p>Use case: build environments where the repository will be deleted after a single build, where access to commit history is required</p>"},{"location":"reference/git/clone/#shallow-clone","title":"Shallow Clone","text":"<p>A shallow clone truncate the commit history, only fetching after the specified time.</p> <pre><code>git clone --shallow-since=&lt;date&gt;\n</code></pre> <p>Use case: build environments where the repository will be deleted after a single build.</p> <p>Shallow clones are discouraged for development as they limit git commands and may put undue stress on later fetches </p> <p>Partial Clones are typically recommended over shallow clones</p> <p>Get up to speed with partial clone and shallow clone</p>"}]}